<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小灰灰在青青草原</title>
  
  
  <link href="https://xinrihui.github.io/atom.xml" rel="self"/>
  
  <link href="https://xinrihui.github.io/"/>
  <updated>2022-12-04T15:34:13.232Z</updated>
  <id>https://xinrihui.github.io/</id>
  
  <author>
    <name>Xinrihui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>提升方法推导(AdaBoost, GBDT, XGBoost)</title>
    <link href="https://xinrihui.github.io/2022/12/04/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC/"/>
    <id>https://xinrihui.github.io/2022/12/04/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC/</id>
    <published>2022-12-04T15:29:03.000Z</published>
    <updated>2022-12-04T15:34:13.232Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="created" content="2022-02-14 16:34:24 +0000"/><meta name="source-application" content="ios.clipper.evernote"/><meta name="updated" content="2022-12-04 15:27:47 +0000"/><title>提升方法推导</title></head><body><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-01.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-02.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-03.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-04.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-05.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-06.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-07.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-08.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-09.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-10.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-11.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-12.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-13.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-14.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-15.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-16.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-17.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-18.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-19.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-20.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-21.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-22.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-23.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-24.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-25.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-26.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-27.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-28.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-29.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-30.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-32.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-31.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-33.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-34.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-35.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-36.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-37.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-38.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-39.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-40.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-41.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-42.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-43.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-44.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-45.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-46.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-47.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-48.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-49.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-50.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-51.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-52.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-53.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-54.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-55.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-57.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-56.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-58.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-59.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-60.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-61.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-62.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-64.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-65.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-66.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-67.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-63.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-68.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-70.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC.resources/%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95-69.jpg" height="1491" width="2386"/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="机器学习推公式系列" scheme="https://xinrihui.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8E%A8%E5%85%AC%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="机器学习" scheme="https://xinrihui.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="AdaBoost" scheme="https://xinrihui.github.io/tags/AdaBoost/"/>
    
    <category term="GBDT" scheme="https://xinrihui.github.io/tags/GBDT/"/>
    
    <category term="XGBoost" scheme="https://xinrihui.github.io/tags/XGBoost/"/>
    
  </entry>
  
  <entry>
    <title>MLP CNN RNN LSTM的推导（正向和反向传播）</title>
    <link href="https://xinrihui.github.io/2022/12/04/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89/"/>
    <id>https://xinrihui.github.io/2022/12/04/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89/</id>
    <published>2022-12-04T15:17:01.000Z</published>
    <updated>2022-12-04T15:21:00.228Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="created" content="2022-02-14 16:29:22 +0000"/><meta name="source-application" content="ios.clipper.evernote"/><meta name="updated" content="2022-02-14 16:30:48 +0000"/><title>MLP CNN RNN LSTM的推导（正向和反向传播）</title></head><body><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-01.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-02.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-03.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-04.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-05.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-06.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-07.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-08.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-10.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-09.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-11.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-12.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-13.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-14.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-15.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-16.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-17.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-18.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-19.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-20.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-21.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-22.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-23.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-24.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-25.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-26.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-27.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-28.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-29.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-30.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-31.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-32.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-33.jpg" height="1491" width="2386"/></div><div><img src="/Resources/MLP%20CNN%20RNN%20LSTM%E7%9A%84%E6%8E%A8%E5%AF%BC%EF%BC%88%E6%AD%A3%E5%90%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%89.resources/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-34.jpg" height="1491" width="2386"/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="机器学习推公式系列" scheme="https://xinrihui.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8E%A8%E5%85%AC%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="MLP - CNN - RNN - LSTM" scheme="https://xinrihui.github.io/tags/MLP-CNN-RNN-LSTM/"/>
    
    <category term="机器学习" scheme="https://xinrihui.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Word2vec 推导</title>
    <link href="https://xinrihui.github.io/2022/12/04/Word2vec%20%E5%8E%9F%E7%90%86/"/>
    <id>https://xinrihui.github.io/2022/12/04/Word2vec%20%E5%8E%9F%E7%90%86/</id>
    <published>2022-12-04T15:17:01.000Z</published>
    <updated>2022-12-04T15:35:29.543Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="735407517@qq.com"/><meta name="created" content="2022-06-22 06:59:54 +0000"/><meta name="source" content="desktop.mac"/><meta name="updated" content="2022-12-04 15:14:15 +0000"/><title>Word2vec 原理</title></head><body><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-01.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-02.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-03.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-04.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-05.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-06.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-07.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-08.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-09.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-10.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-11.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-12.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-13.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-14.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-15.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-16.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-17.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-18.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-19.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-20.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-21.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-22.jpg" height="1491" width="2386"/></div><div><img src="/Resources/Word2vec%20%E5%8E%9F%E7%90%86.resources/%E8%AF%8D%E5%90%91%E9%87%8F-23.jpg" height="1491" width="2386"/></div><div><br/></div><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="机器学习推公式系列" scheme="https://xinrihui.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8E%A8%E5%85%AC%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="机器学习" scheme="https://xinrihui.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="word2vec" scheme="https://xinrihui.github.io/tags/word2vec/"/>
    
  </entry>
  
  <entry>
    <title>降维（PCA 和 LDA）推导</title>
    <link href="https://xinrihui.github.io/2022/12/04/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC/"/>
    <id>https://xinrihui.github.io/2022/12/04/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC/</id>
    <published>2022-12-04T15:17:01.000Z</published>
    <updated>2022-12-04T15:21:00.203Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="735407517@qq.com"/><meta name="created" content="2022-06-22 08:31:46 +0000"/><meta name="source" content="desktop.mac"/><meta name="updated" content="2022-12-04 15:12:48 +0000"/><title>降维（PCA 和 LDA）推导</title></head><body><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-01.jpg" height="1491" width="2386"/><br/></div><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-02.jpg" height="1491" width="2386"/><br/></div><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-03.jpg" height="1491" width="2386"/></div><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-04.jpg" height="1491" width="2386"/><br/></div><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-05.jpg" height="1491" width="2386"/><br/></div><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-06.jpg" height="1491" width="2386"/><br/></div><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-07.jpg" height="1491" width="2386"/><br/></div><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-08.jpg" height="1491" width="2386"/><br/></div><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-09.jpg" height="1491" width="2386"/><br/></div><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-10.jpg" height="1491" width="2386"/><br/></div><div><img src="/Resources/%E9%99%8D%E7%BB%B4%EF%BC%88PCA%20%E5%92%8C%20LDA%EF%BC%89%E6%8E%A8%E5%AF%BC.resources/%E9%99%8D%E7%BB%B4-11.jpg" height="1491" width="2386"/><br/></div><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="机器学习推公式系列" scheme="https://xinrihui.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8E%A8%E5%85%AC%E5%BC%8F%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="机器学习" scheme="https://xinrihui.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PCA - LDA" scheme="https://xinrihui.github.io/tags/PCA-LDA/"/>
    
  </entry>
  
  <entry>
    <title>XGBoost原理 - 稀疏感知</title>
    <link href="https://xinrihui.github.io/2022/12/04/XGBoost%E5%8E%9F%E7%90%86%20-%20%E7%A8%80%E7%96%8F%E6%84%9F%E7%9F%A5/"/>
    <id>https://xinrihui.github.io/2022/12/04/XGBoost%E5%8E%9F%E7%90%86%20-%20%E7%A8%80%E7%96%8F%E6%84%9F%E7%9F%A5/</id>
    <published>2022-12-04T15:02:24.000Z</published>
    <updated>2022-12-04T15:07:41.608Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="735407517@qq.com"/><meta name="created" content="2022-12-04 14:56:46 +0000"/><meta name="source" content="yinxiang.superNote"/><meta name="updated" content="2022-12-04 15:00:02 +0000"/><title>XGBoost原理 - 稀疏感知</title></head><body><h1>1.稀疏感知 （ Sparsity-aware Split Finding ）</h1><div><br/></div><div>通常情况下，我们人为在处理缺失值 的时候大多会选用中位数、均值或是二者的融合来对数值型特征进行填补，使用出现次数最多的类别来填补缺失的类别特征。</div><div><br/></div><div>xgboost  对缺失值（np.nan）的处理与 稀疏矩阵的处理类似：</div><div><br/></div><div>xgboost 把 0 值 也当做缺失值，若样本中的 0 值不是因为 one-hot 产生的，而是这个特征 取值的范围包含0 （eg. 特征取值范围为 [-2,2] ） 则会出现问题（需要指定  xgboost  的缺失值 为 Nan，即不让 xgboost 把 0 当做缺失值） </div><div><br/></div><div>在寻找split point的时候，不会对该特征为missing的样本进行遍历统计，只对该列特征值为non-missing的样本上对应的特征值进行遍历，通过这个技巧来减少了 为稀疏离散特征 寻找split point的时间开销。</div><div><br/></div><div>在逻辑实现上，为了保证完备性，会分别处理将missing该特征值的样本分配到左叶子结点和右叶子结点的两种情形，计算增益后选择增益大的方向进行分裂即可。</div><div><br/></div><div>Xgboost对缺失值的处理具体看下面的算法流程：</div><div><br/></div><img src="/Resources/XGBoost%E5%8E%9F%E7%90%86%20-%20%E7%A8%80%E7%96%8F%E6%84%9F%E7%9F%A5.resources/6637FAD1-7F80-4543-815B-53660C96A65F.png" height="770" width="1011"/><div>首先需要注意到两个集合：</div><ul><li><div>一个是 I, 其包含所有的样本（包括 含缺失值的样本）</div></li><li><div>Ik  是不包含空缺值样本的集合。</div></li></ul><div><br/></div><div>在计算总的G和H时用的是I , 也就说空缺值 的一阶导数和二阶导数已经包含进去了。</div><div><br/></div><div>可以看到内层循环里面有两个 for  , 这两个 for 针对的集合就是 Ik  </div><div><br/></div><div>第一个for是从把特征取值从小到大排序，然后从小到大进行扫描，这个时候在计算GR的时候是用总的G 减去GL ,这意味着把空缺样本归到了右子结点。</div><div><br/></div><div>第二个for相反过来，把空缺样本归到了左子结点。</div><div><br/></div><div>只要比较这两次最大增益出现在第一个for中还是第二个for中就可以知道对于空缺值的分裂方向，即 节点分裂的默认方向 （下图中红线 所示）， 当模型做预测时，若预测样本出现 缺失值，则在树上 根据默认方向 往下走即可。</div><img src="/Resources/XGBoost%E5%8E%9F%E7%90%86%20-%20%E7%A8%80%E7%96%8F%E6%84%9F%E7%9F%A5.resources/B2781204-77FA-4E14-8AA6-EFC8529FDB74.png" height="454" width="1030"/><h1>2.高维稀疏(离散)向量 </h1><div><br/></div><h2>2.1 高维稀疏离散向量的存储</h2><div><br/></div><div>利用字典可以只存 非零值，例如 Compressed Sparse Column (CSC)  </div><div><br/></div><div>详见 本笔记本：系统设计1：分块并行、缓存优化和Blocks for Out-of-core</div><div><br/></div><div><br/></div><h2>2.2 类别特征编码</h2><div><br/></div><div>大部分模型无法直接处理类别型数据的，即离散特征。但是，决策树中的分类树ID3, C4.5,  Cart 可以处理类别型数据。对于类别特征，可以采用以下 2种编码方式：</div><div><br/></div><div>（1）数值编码</div><div><br/></div><div>有的类别型特征 具有 大小关系（可比类型），</div><div><br/></div><div>eg1. 年龄特征 的 取值范围为 [ 童年 少年 中年 老年 ] ， 那么我把 四个特征值分别编码为 [ 0,1,2,3] 是可行的，因为 小于 中年 可以是   [童年, 少年]</div><div><br/></div><div>eg.2 信贷情况 ，特征的所有取值为[一般, 好, 非常好]</div><div><br/></div><div>eg.3 电影评分等级，特征的所有取值为[1, 2, 3, 4, 5]</div><p style="--en-paragraph:true;text-align:start;"><br/></p><div>（2）one-hot 编码（稀疏编码）</div><div><br/></div><div>大部分的类别型特征没有大小关系（不可比类型）</div><div><br/></div><div>例如 ：运动品牌 特征，特征的所有取值为 [ 耐克，阿迪，李宁 ]。若将 这 3个特征值分别编码为（0,1,2）是不对的，因为这样已经不公平的定义了三者之间的距离，阿迪和耐克的距离是1，而李宁和耐克的距离是2，这样会导致模型错误地划分特征空间。</div><div><br/></div><div>正确的划分方法是，将 1个特征拆成 3个特征， 即  feature1= 是否是耐克 ，feature2= 是否是阿迪，feature3=是否是李宁，这相当于把低维的特征空间映射到高维 （one-hot 编码）：</div><div><br/></div><table style="--en-fitwindow:false;border-left:1px solid #d9d9d9;border-top:1px solid #d9d9d9;border-collapse:collapse;width:520px;" width="520px"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div><br/></div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>feature1</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>feature2</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>feature3</div></td></tr><tr><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>耐克</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>1</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>0</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>0</div></td></tr><tr><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>阿迪</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>0</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>1</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>0</div></td></tr><tr><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>李宁</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>0</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>0</div></td><td style="--en-typeInfo:{&quot;type&quot;:&quot;text&quot;,&quot;data&quot;:{}};border-right:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:10px;"><div>1</div></td></tr></tbody></table><div><br/></div><div>（3）特征交叉（组合）</div><div><br/></div><div><br/></div><h2> 2.3 数值类型特征的处理</h2><div><br/></div><div>1.归一化（normalization） 让模型收敛</div><div><br/></div><div>2.分桶改变特征值的分布</div><div><br/></div><div>比如图 5 就显示了 Sparrow Recsys 中编号在前 1000 的电影平均评分分布。你可以很明显地看到，由于人们打分有“中庸偏上”的倾向，因此评分大量集中在 3.5 的附近，而且越靠近 3.5 的密度越大。这对于模型学习来说也不是一个好的现象，因为特征的区分度并不高。</div><div><br/></div><div><br/></div><a href="/Resources/XGBoost%E5%8E%9F%E7%90%86%20-%20%E7%A8%80%E7%96%8F%E6%84%9F%E7%9F%A5.resources/59FCAE60-F204-4B92-81A3-58C01F92BFB4.webp">59FCAE60-F204-4B92-81A3-58C01F92BFB4.webp</a><div><br/></div><div>                            图5 电影的平均评分分布</div><div><br/></div><div><br/></div><div>这该怎么办呢？我们经常会用分桶的方式来解决特征值分布极不均匀的问题。所谓“分桶（Bucketing）”，就是将样本按照某特征的值从高到低排序，然后按照桶的数量找到分位数，将样本分到各自的桶中，再用桶 ID 作为特征值。</div><div><br/></div><div>对于数值型特征的处理方法还远不止于此，在经典的 YouTube 深度推荐模型中，我们就可以看到一些很有意思的处理方法。比如，在处理观看时间间隔（time since last watch）和视频曝光量（#previous impressions）这两个特征的时，YouTube 模型对它们进行归一化后，又将它们各自处理成了三个特征（图 6 中红框内的部分），分别是原特征值 x，特征值的平方x^2，以及特征值的开方，这又是为什么呢？</div><div><br/></div><div><br/></div><div><br/></div><a href="/Resources/XGBoost%E5%8E%9F%E7%90%86%20-%20%E7%A8%80%E7%96%8F%E6%84%9F%E7%9F%A5.resources/97ED9E74-F65F-4A1D-AD93-6D330D852151.webp">97ED9E74-F65F-4A1D-AD93-6D330D852151.webp</a><div><br/></div><div>无论是平方还是开方操作，改变的还是这个特征值的分布，这些操作与分桶操作一样，都是希望通过改变特征的分布，让模型能够更好地学习到特征内包含的有价值信息。但由于我们没法通过人工的经验判断哪种特征处理方式更好，所以索性把它们都输入模型，让模型来做选择。</div><div><br/></div><h2>2.4 高维稀疏带来的问题</h2><div><br/></div><div>如果类别过多，如商品ID，在one-hot处理后数据会变得过于稀疏，大大增加了训练集的大小，浪费计算资源。另外，对于线上系统，我们追求低延迟和高吞吐量，因此 在保证模型效果不变的前提下，模型推理时 用的特征越少越好，解决思路有：</div><div><br/></div><div>（1） 降维（PCA,  LDA）</div><div><br/></div><div>（2）Embedding </div><div>         </div><div>        eg1. word2vec 就是将 高维稀疏的one hot 向量 映射到 低维稠密空间 </div><div>        </div><div>        eg2. 推荐系统中 Item的Embedding 和 user 的Embedding</div><div><br/></div><div>（3）使用 LR 或者 MLP 并加上 L1 正则化，在训练时，L1 正则化 会使得 某些特征的权重变为0，效果与降维相同</div><div><br/></div><div>（4）使用 决策树 模型 做特征筛选，挑出 能让 信息熵 下降最多的特征</div><div><br/></div><div>（5）Lightgbm 针对高维特征的问题提出了 互斥特征捆绑算法（Exclusive Feature Bundling，EFB），对稀疏特征进行无损合并。</div><div><br/></div><div><br/></div><h2>2.5 xgboost 真的不 适合 高维稀疏特征么</h2><div><br/></div><div>1.对一个 类别特征，它的取值范围是 [ 0,1,2,..., 100w ]，样本一共10w 条</div><div>    </div><ul><li><div>若直接 对它做数值编码 ，此时只有1维特征，考虑 xgboost 找切分点的 次数为：100w</div></li></ul><div>    </div><ul><li><div>若将其 one-hot 化，此时特征维度变为100w维， 对于 每一个维度大部分特征值都为0（只有 几个样本的值为1）， 因为 xgboost 的稀疏感知， 0不会作为切分点，所以对每一个维度xgboost 找切分点的 次数为1  ， 整体找切分点的 次数同样为：100w</div></li></ul><div>    </div><div>    因此，对类别特征进行稀疏编码后 不会增加 xgboost 训练的代价</div><div><br/></div><div>2.xgboost 适合 稀疏（离散）的特征，它怕的是 浮点运算，因为CPU 适合做逻辑计算而不是浮点运算；而 神经网络由于 GPU 对矩阵运算（浮点运算）的加速，更适合连续（稠密）的特征。</div><div><br/></div><div>3.神经网络的结构特点不利于稀疏特征向量的处理</div><div><br/></div><div>这个问题涉及到整个 Embedding 技术的意义。</div><div>一方面，如果我们深入到神经网络的梯度下降学习过程就会发现，特征过于稀疏会导致整个网络的收敛非常慢，因为每一个样本的学习只有极少数的权重会得到更新，这在样本数量有限的情况下会导致模型不收敛。</div><div>另一个方面，One-hot 类稀疏特征的维度往往非常地大，可能会达到千万甚至亿的级别，如果直接连接进入深度学习网络，那整个模型的参数数量会非常庞大，这对于一般公司的算力开销来说都是吃不消的。</div><div>因此，我们往往会先通过 Embedding 把原始稀疏特征稠密化，然后再输入复杂的深度学习网络进行训练，这相当于把原始特征向量跟上层复杂深度学习网络做一个隔离。</div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><h1>引用</h1><div><br/></div><div><a href="https://tech.meituan.com/2019/08/15/problems-caused-by-missing-xgboost-values-and-their-in-depth-analysis.html" rev="en_rl_none">https://tech.meituan.com/2019/08/15/problems-caused-by-missing-xgboost-values-and-their-in-depth-analysis.html</a></div><div><a href="https://www.jianshu.com/p/d07f0b0726da" rev="en_rl_none">https://www.jianshu.com/p/d07f0b0726da</a></div><div><a href="https://zhuanlan.zhihu.com/p/366952043" rev="en_rl_none">https://zhuanlan.zhihu.com/p/366952043</a></div><div><a href="https://www.zhihu.com/question/336110178/answer/823523924" rev="en_rl_none">https://www.zhihu.com/question/336110178/answer/823523924</a></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="XGBoost 系列" scheme="https://xinrihui.github.io/categories/XGBoost-%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="xgboost" scheme="https://xinrihui.github.io/tags/xgboost/"/>
    
    <category term="源码分析" scheme="https://xinrihui.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="机器学习" scheme="https://xinrihui.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>XGBoost 源码分析 3</title>
    <link href="https://xinrihui.github.io/2022/12/04/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%203/"/>
    <id>https://xinrihui.github.io/2022/12/04/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%203/</id>
    <published>2022-12-04T14:46:34.000Z</published>
    <updated>2022-12-04T15:07:41.593Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="735407517@qq.com"/><meta name="created" content="2021-09-19 08:46:03 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="updated" content="2021-10-11 02:00:54 +0000"/><title>XGBoost 源码分析 3</title></head><body><div><span style="font-weight: bold;">5.DMatrix 实现</span></div><div><br/></div><div>1.读取训练数据</div><div><br/></div><div>src/cli_main.cc -&gt; void CLITrain() {</div><div><br/></div><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%203.resources/85B91CEC-3288-4A0F-AFD1-2C0663DF573B.png" height="529" width="1015"/></div><div><br/></div><div>2.Load 函数</div><div><br/></div><div>src/data/data.cc -&gt; DMatrix::Load(</div><div><br/></div><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%203.resources/08DD226F-27E3-4CB0-868A-69DBCF0116F3.png" height="724" width="1198"/></div><div><br/></div><div><br/></div><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%203.resources/CA404C32-DE7D-4011-A371-04C991B4F1E5.png" height="221" width="1099"/></div><div><br/></div><div>3.Create 函数</div><div><br/></div><div>src/data/data.cc -> &nbsp;&nbsp;DMatrix::Create(</div><div><br/></div><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%203.resources/B5BCD1C4-0974-4484-8215-A185A2C68ADC.png" height="222" width="1003"/></div><div><br/></div><div>4.SimpleDMatrix 函数</div><div><br/></div><div>src/data/simple_dmatrix.cc -&gt; SimpleDMatrix::SimpleDMatrix()</div><div><br/></div><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%203.resources/5C697217-6D01-4AC9-BBCF-B67D435FFA40.png" height="615" width="1037"/></div><div><br/></div><div><br/></div><div>带注释的源码详见 github</div><div><a href="https://github.com/Xinrihui/xgboost-code-review">https://github.com/Xinrihui/xgboost-code-review</a></div><div><br/></div><div><br/></div><div><span style="font-weight: bold;">引用</span></div><div><a href="https://blog.csdn.net/matrix_zzl/article/details/78699605">https://blog.csdn.net/matrix_zzl/article/details/78699605</a></div><div><a href="https://blog.csdn.net/matrix_zzl/article/details/78705753?spm=1001.2014.3001.5501">https://blog.csdn.net/matrix_zzl/article/details/78705753?spm=1001.2014.3001.5501</a></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/T</summary>
      
    
    
    
    <category term="XGBoost 系列" scheme="https://xinrihui.github.io/categories/XGBoost-%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="xgboost" scheme="https://xinrihui.github.io/tags/xgboost/"/>
    
    <category term="源码分析" scheme="https://xinrihui.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>XGBoost 源码分析 2</title>
    <link href="https://xinrihui.github.io/2022/12/04/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202/"/>
    <id>https://xinrihui.github.io/2022/12/04/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202/</id>
    <published>2022-12-04T14:46:33.000Z</published>
    <updated>2022-12-04T15:07:41.600Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="735407517@qq.com"/><meta name="created" content="2021-09-19 08:32:12 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="updated" content="2021-09-19 08:38:03 +0000"/><title>XGBoost 源码分析 2</title></head><body><div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-weight: bold; line-height: 1.6;">3.树的更新机制</span><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">：</span></div><ul><li><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">updater_colmaker</span></div></li></ul><div style="margin: 1.4em 0px;"><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/updater_colmaker.cc">updater_colmaker.cc</a></div><ul><li><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">updater_histmaker</span></div></li><li><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">updater_quantile_hist</span></div></li><li><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">updater_gpu_hist</span></div></li><li><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">updater_prune</span></div></li><li><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">updater_refresh</span></div></li><li><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">updater_sync</span></div></li></ul><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/C9C8E35D-79F0-4DF4-B887-3A1870A04EF0.jpg" height="478" width="926"/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">同时，从代码继承上来看， 除了剪枝prune，刷新refresh，同步sync之外， 有三种核心的实现 （这里没有把GPU的实现放在图里面）：</span></div><ul style="padding: 0px; margin: 1.4em 0px; display: table;"><li style="list-style-type:none;display:table-row;list-style:none;"><div><span style="display: table-cell; white-space: pre; font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">•HistMaker, CQHistMaker</span></div></li><li style="list-style-type:none;display:table-row;list-style:none;"><div><br/></div><div><span style="display: table-cell; white-space: pre; font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">•ColMaker</span></div></li><li style="list-style-type:none;display:table-row;list-style:none;"><div><br/></div><div><span style="display: table-cell; white-space: pre; font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">•QuantileHistMaker, QuantileHistMock</span></div></li></ul><div style="margin: -0.8em 0px;"><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/074EC1D3-7E53-4061-AD13-4590C8AC8FFC.jpg" height="1402" width="1080"/></div><div><br/></div></div><div style="margin: 1.4em 0px;"><br/></div><div style="margin: -0.8em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">那么， 具体这几个更新的核心差异是什么呢？咱看参数是怎么告诉咱的？</span></div><div style="margin: -0.8em 0px;"><br/></div><ul style="padding: 0px; margin: 1.4em 0px; display: table;"><li style="list-style-type:none;display:table-row;list-style:none;"><div><span style="display: table-cell; white-space: pre; font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">•ColMaker：是精准模型</span></div></li><li style="list-style-type:none;display:table-row;list-style:none;"><div><br/></div><div><span style="display: table-cell; white-space: pre; font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">•HistMaker：是近似模型</span></div></li><li style="list-style-type:none;display:table-row;list-style:none;"><div><br/></div><div><span style="display: table-cell; white-space: pre; font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">•QuantileHistMaker：是Hist模型</span></div></li><li style="list-style-type:none;display:table-row;list-style:none;"><div><br/></div><div><span style="display: table-cell; white-space: pre; font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">•GPUHistMaker：GPU近似模型</span></div></li></ul><div style="margin: -0.8em 0px;"><div><br/></div><div><br/></div><div><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/gbtree.cc">gbtree.cc</a></div><div><span style="font-size: 12pt; color: rgb(18, 18, 18); font-weight: bold;">void GBTree::ConfigureUpdaters()&nbsp;&nbsp;</span></div><div><br/></div><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/D88E2ED6-9EDE-4340-9E30-95DA3CEBD68A.png" height="814" width="864"/></div></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px;"><br/></span></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">对应到论文的实现，精准贪心(kExact) 和 近似分位数( kApprox ) 算法.</span></div><div style="margin: -0.8em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/CA30726C-652A-4D4E-8C17-102CA1F6D970.jpg" height="582" width="720"/></div><div style="margin: 1.4em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">所以接下来， 我们只看精准实现ColMaker。前面咱提到，GBTree的DoBoost 是主要入口。其中最主要的实现是BoostNewTrees。这里对于多类情况， 每个类别都要生成一堆树。</span></div><div style="margin: 1.4em 0px;"><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/gbtree.cc">gbtree.cc</a></div><div style="margin: -0.8em 0px;"><span style="font-size: 12pt; color: rgb(18, 18, 18); font-weight: bold;">void GBTree::DoBoost</span></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/D8C6D1DC-8A99-4A4A-9B40-77CEE8CF49CB.png" height="775" width="1043"/></div><div style="margin: 1.4em 0px;"><br/></div><div style="margin: -0.8em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-weight: bold;">4.XGBoost ColMaker 实现</span></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">BoostNewTrees里面主要是生成并发的新树（个数为num_parallel_tree， 这个配置其实和随机森林的意味更接近，后续可以假定就是num_parallel_tree=1， new_trees就一棵树），然后更新两种默认的更新器， ColMaker 和 TreePruner (剪枝)。</span></div><div style="margin: 1.4em 0px;"><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/gbtree.cc">gbtree.cc</a></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt; font-weight: bold;">void GBTree::BoostNewTrees</span></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/6926056C-DF78-404D-B70D-6BBFBF49FA4C.png" height="748" width="956"/></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/23398D86-B30E-4DCD-AFC3-12BAFEA76915.png" height="678" width="1266"/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px;">由上图可见7&nbsp;&nbsp;种&nbsp;&nbsp;</span><span style="font-size: 16px; font-weight: bold;">树的</span><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-weight: bold; line-height: 1.6;">更新机制</span></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">然后，就看ColMaker的Update函数实现， 背后其实是 ColMaker::Builder 实现的。 最终依赖于Builder 的 EnumerateSplit实现：</span></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px;">调用关系为：</span></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt;">TreeUpdater</span><span style="font-size: 16px;">:: Update() ->&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt;">TreeUpdater</span><span style="font-size: 12pt;">:: Builder ::</span><span style="font-size: 16px;">Update</span><span style="font-size: 12pt;">&nbsp;&nbsp; ->&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 16px;">&nbsp;&nbsp;</span><span style="font-size: 12pt;">TreeUpdater</span><span style="font-size: 12pt;">:: Builder :: findsplit&nbsp;&nbsp; ->&nbsp;&nbsp;</span><span style="font-size: 12pt;">UpdateSolution ->&nbsp;&nbsp;</span><span style="font-size: 16px;">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt;">TreeUpdater</span><span style="font-size: 12pt;">:: Builder ::</span><span style="font-size: 12pt;">&nbsp;&nbsp;</span><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">EnumerateSplit</span></div><div style="margin: 1.4em 0px;"><br/></div><div style="margin: 1.4em 0px;"><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/updater_colmaker.cc">updater_colmaker.cc</a></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt; font-weight: bold;">class&nbsp;&nbsp; TreeUpdater ::&nbsp;&nbsp;</span><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">void Update()</span></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/860AA39A-F928-4835-BF2C-1EDAA1969706.png" height="648" width="854"/></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt; font-weight: bold;">class&nbsp;&nbsp; TreeUpdater ::&nbsp;&nbsp;</span><span style="font-size: 12pt; font-weight: bold;">class Builder ::&nbsp;&nbsp;</span><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">virtual void Update(</span></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/43D554E4-2E53-47F9-8FDA-2742904CD4F6.png" height="664" width="835"/></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt; font-weight: bold;">class&nbsp;&nbsp; TreeUpdater ::&nbsp;&nbsp;</span><span style="font-size: 12pt; font-weight: bold;">class Builder ::</span><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">&nbsp;&nbsp;inline void FindSplit(</span></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/974ACC56-E6B8-465B-AF9D-A754204132FE.png" height="831" width="1040"/></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt; font-weight: bold;">class&nbsp;&nbsp; TreeUpdater ::&nbsp;&nbsp;</span><span style="font-size: 12pt; font-weight: bold;">class Builder ::&nbsp;&nbsp;</span><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">virtual void UpdateSolution(</span></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/4148474B-ADDB-48F7-9081-6E146790AE2C.png" height="801" width="981"/></div><div style="margin: 1.4em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt; font-weight: bold;">class&nbsp;&nbsp; TreeUpdater ::&nbsp;&nbsp;</span><span style="font-size: 12pt; font-weight: bold;">class Builder ::&nbsp;&nbsp;</span><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">void EnumerateSplit(</span></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/4A8C69E4-B6C9-488F-BC97-74778EE96FAE.png" height="822" width="928"/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-weight: bold; line-height: 1.6;">4.叶子节点分裂 (Split)</span></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">主要由TreeEvalutor 的 SplitEvaluator类负责完成</span></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><img src="https://pic1.zhimg.com/80/v2-16faab48b7abe608b00bb734de7bacf4_720w.png"/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">大体上咱又能够 把函数 和 对应的Paper公式相关起来了：</span></div><div style="margin: 1.4em 0px;"><br/></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/7A0EFC3D-6A81-4916-BD2F-BA3BB635873B.jpg" height="643" width="1440"/></div><div style="margin: 1.4em 0px;"><br/></div><div style="margin: -0.8em 0px;"><span style="font-size: 16px; color: unset; font-family: unset; font-weight: bold;">4.1. 计算 split&nbsp;&nbsp;前 原节点的&nbsp;&nbsp;权重(叶子节点的值)&nbsp;&nbsp; 和&nbsp;&nbsp;增益 (gain)</span></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/updater_colmaker.cc">updater_colmaker.cc</a></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><span style="font-size: 16px; color: unset; font-family: unset;">&nbsp;&nbsp;</span></div><div><span style="font-size: 12pt; font-weight: bold;">class Builder ::&nbsp;&nbsp;</span><span style="font-size: 12pt; font-weight: bold;">inline void InitNewNode</span></div><div style="margin: -0.8em 0px;"><div><br/></div><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/00B069E8-EB87-4FD6-BACA-35953ECF55B5.png" height="263" width="1013"/></div></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><div><br/></div></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">（1）拆分前 节点 的Gain</span><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">&nbsp;&nbsp;：</span></div><div style="margin: 1.4em 0px;"><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/split_evaluator.h">split_evaluator.h</a></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt; font-weight: bold;">TreeEvaluator ::&nbsp;&nbsp;</span><span style="font-size: 12pt; font-weight: bold;">SplitEvaluator ::&nbsp;&nbsp;</span><span style="font-size: 12pt; font-weight: bold;">float CalcGain</span></div><div style="margin: -0.8em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/57C939F7-5FCB-4EF5-9640-ED1DA0266C06.png" height="133" width="926"/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><span style="font-size: 12pt; font-weight: bold;">CalcGainGivenWeight</span></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/1CAC83B1-296E-4969-9A40-AE0D4E612C01.png" height="379" width="1087"/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/param_1.h">param_1.h</a></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><span style="font-size: 12pt; font-weight: bold;">inline T CalcGainGivenWeight</span></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/5C0CF495-F4F1-4ECB-B70E-45326D90B29D.png" height="201" width="941"/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/938D9B25-7B42-4658-9D6C-1E335E929BE3.png" height="233" width="409"/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">代码兼容了 L1(&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(18, 18, 18);">ThresholdL1&nbsp;&nbsp;</span><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">) 的情况，因此和&nbsp;&nbsp;公式不符</span></div><div style="margin: 1.4em 0px;"><div><br/></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">（2）拆分前 节点的权重</span></div><div><br/></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">权重计算，要注意，这里兼容了L1和L2的正则化，但是论文中只给了L2的情况。</span></div><div><br/></div><div><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/param.h">param.h</a></div><div><br/></div><div><span style="font-size: 12pt; color: rgb(18, 18, 18); font-weight: bold;">inline T CalcWeight</span></div></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/3344E4F7-595E-457D-948D-85EBA932711F.png" height="379" width="872"/></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/EE720179-F78A-4612-B9A1-71791241DC7E.png" height="133" width="499"/></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/F03D9AAD-C308-4F5B-879F-0472BE632D8A.jpg" height="503" width="835"/></div><div style="margin: 1.4em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-weight: bold;">4.2. 计算&nbsp;&nbsp; Split后的 增益变化 loss_chg&nbsp;&nbsp;</span></div><div style="margin: 1.4em 0px;"><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/updater_colmaker.cc">updater_colmaker.cc</a></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt; font-weight: bold;">class Builder ::&nbsp;&nbsp;</span><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">void EnumerateSplit(</span></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/E4ED2242-2AD0-4434-B39E-7D1E415F8945.png" height="452" width="977"/></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt; font-weight: bold;">class Builder ::&nbsp;&nbsp;</span><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">inline void UpdateEnumeration</span><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">(</span></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/1A97EF58-3DC8-499A-8582-A6BB3B551610.png" height="632" width="1301"/></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/FD2B0B6A-AD70-4A59-A72B-28B2AA93E905.png" height="294" width="1048"/></div><div style="margin: 1.4em 0px;"><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/split_evaluator.h">split_evaluator.h</a></div><div style="margin: 1.4em 0px;"><span style="font-size: 12pt; color: rgb(18, 18, 18); font-weight: bold;">class&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(18, 18, 18); font-weight: bold;">TreeEvaluator ::&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(18, 18, 18); font-family: unset; font-weight: bold;">struct SplitEvaluator ::&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(18, 18, 18); font-family: unset; font-weight: bold;">double CalcSplitGain</span></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/8E08FA6D-D0E7-4081-B196-29065E2FF4E6.png" height="593" width="953"/></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%202.resources/D6456F8B-2390-442B-84EF-8BF187F8390D.png" height="293" width="1048"/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px;">其中 GradStats&nbsp;&nbsp;记录了&nbsp;&nbsp;G&nbsp;&nbsp;和&nbsp;&nbsp;H ，即梯度的累加和</span></div><div><br/></div><div><br/></div></div><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/T</summary>
      
    
    
    
    <category term="XGBoost 系列" scheme="https://xinrihui.github.io/categories/XGBoost-%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="xgboost" scheme="https://xinrihui.github.io/tags/xgboost/"/>
    
    <category term="源码分析" scheme="https://xinrihui.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>XGBoost 源码分析 1</title>
    <link href="https://xinrihui.github.io/2022/12/04/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201/"/>
    <id>https://xinrihui.github.io/2022/12/04/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201/</id>
    <published>2022-12-04T14:46:32.000Z</published>
    <updated>2022-12-04T15:07:41.621Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="735407517@qq.com"/><meta name="created" content="2021-09-19 08:33:58 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="updated" content="2021-10-11 02:03:50 +0000"/><title>XGBoost 源码分析 1</title></head><body><div style="margin-top: 1.4em; margin-right: 0px; margin-bottom: 1.4em;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-weight: bold;">1.XGBoost 入口代码框架</span></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">从命令行入口开始，毕竟C++直接的入口，容易理解:</span></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">1.</span> <a href="https://link.zhihu.com/?target=http%3A//cli_main.cc" style="font-size: 0px; text-shadow: none; color: transparent; font-family: a; font-stretch: normal; font-variant: normal; line-height: 0;">http://</a><span style="font-size: 12pt;">src/cli_main.cc</span> <span style="font-size: 12pt; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">是一个带错误处理的入口：</span></div><div style="margin: 1.4em 0px;"><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201.resources/cli_main.cc">cli_main.cc</a></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><img src="https://pic2.zhimg.com/80/v2-2c5edc4cff53b2284805c7d4f9fdf0ed_720w.jpg"/></div><div style="margin: 1.4em 0px;"><div><br/></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">2. CLI::Run的核心就是干3件事， Train, DumpModel，Predict。咱目前只看Train</span></div></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><img src="https://pic4.zhimg.com/80/v2-74c51fe3bb627913915e8f774300b0f3_720w.jpg"/></div><div style="margin: 1.4em 0px;"><div><br/></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">3. Train干4件事情， Load数据， 初始化 Learner，循环训练和保存模型， 咱目前只看训练：UpdateOneIter</span></div></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201.resources/378E8E2D-74B6-411A-8B5D-D10BBBADEC7C.jpg" height="384" width="673"/></div></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">要注意，这里的num_round做的事情，其实就是Gradient Boost Trees最常见的套路。</span></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">每一轮的迭代会生成一颗新的树。</span></div><div style="margin: -0.8em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">通过GD来求解stagewise的参数：</span></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><div><br/></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">4. UpdateOneIter 干了3件核心的事情</span></div><div><br/></div><div style="margin: 1.4em 0px;"><div><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201.resources/learner.cc">learner.cc</a></div><div><br/></div><div><span style="font-size: 16px;">class&nbsp;&nbsp;</span><span style="font-size: 12pt;">LearnerImpl</span></div><div><span style="font-size: 16px;">->&nbsp;&nbsp;</span> <span style="font-size: 12pt;">void UpdateOneIter(&nbsp;&nbsp;</span></div><div><br/></div></div><div style="margin: -0.8em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201.resources/BA6D567A-6E00-46A9-B4A1-087A13B1D079.jpg" height="328" width="905"/></div><div><br/></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">1）计算当前参数下，样本预测结果，用来计算误差。 （换句话说，如果神初始化，效果perfect，后续都不用训练了）</span></div><div><br/></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">2）计算一阶和二阶梯度&nbsp;&nbsp;</span></div><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201.resources/9DBDAC7B-0377-4823-A97E-018FB27DA1AF.png" height="583" width="1258"/></div><div><br/></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">可以看到不同的&nbsp;&nbsp;目标函数&nbsp;&nbsp;对应不同的&nbsp;&nbsp;梯度算法</span></div><div><br/></div><div><span style="font-size: 16px;">多分类的目标函数（multiclass_obj.cu）：</span></div><div><br/></div><div><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201.resources/multiclass_obj.cu">multiclass_obj.cu</a></div><div><br/></div><div><span style="font-size: 12pt;">class SoftmaxMultiClassObj</span></div><div><span style="font-size: 16px;">->&nbsp;&nbsp;</span><span style="font-size: 12pt;">void GetGradient(</span></div><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201.resources/2EDD157C-63F5-4865-960D-51DAA3776761.png" height="555" width="1243"/></div><div><br/></div><div><span style="font-size: 16px;">对应的 softmax&nbsp;&nbsp;求导公式为：</span></div><div><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201.resources/6ADE3353-9DC5-470B-90E0-56CFF55D44A8.png" height="253" width="547"/></div><div><br/></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">3）Boost操作 ：DoBoost</span></div><div><span style="font-size: 16px;"><br/></span></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">到了DoBoost， 开始有不同的实现方式引入了：GBLine和GBTree的两种方式。 这里可以学习一下， 一个GradientBooster的基础类应该包括哪些核心函数：例如， DoBoost，PredictLeaf, PreditBatch, PredictInstance等等</span></div></div><div style="margin: 1.4em 0px;"><div><br/></div><div><a href="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201.resources/gbtree.cc">gbtree.cc</a></div><div><span style="font-size: 12pt; color: rgb(18, 18, 18); font-weight: bold;">void GBTree::DoBoost</span></div><div><br/></div></div><div style="margin: 1.4em 0px;"><img src="/Resources/XGBoost%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%201.resources/DF60DF5B-C906-4ED9-9084-BD2630F5C21D.jpg" height="1351" width="720"/></div><div style="margin: 1.4em 0px;"><div><br/></div><div><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">对于线性的部分， Boost完了基本也是折线分类器， 相比Tree的非线性分类器，还是很难效果好。 所以默认也是GBTree.</span></div></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">在更深入GBTree之前， 咱大致了解一下XGBoost的代码基本框架，方便认知代码的组织。</span></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; font-weight: bold; line-height: 1.6;">2.XGBoost 代码基本框架</span></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">核心代码结构里面，前面咱知道了，有个boost框架下， 有线性模型和树模型，然后再加上各种评价指标，构成了模型的核心内容。</span></div><div style="margin: -0.8em 0px;"><img src="https://pic3.zhimg.com/80/v2-0786fe712564f9201311885e88c2a31e_720w.jpg"/></div><div style="margin: 1.4em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">在具体的实现上， XGBoost集成了DMLC的良好的注册使用机制。 使用了DMLC_REGISTRY_LINK_TAG宏对核心实现进行插件式管理。</span></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">这里有个常见的宏问题， 在宏里面一个#号，和两个##号是什么区别？为了加深大家的印象， 大家可以自行去了解。</span></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><img src="https://pic3.zhimg.com/80/v2-7e2927956ec2214eb52ddbdd2c73f77a_720w.png"/></div><div style="margin: -0.8em 0px;"><br/></div><div style="margin: 1.4em 0px;"><span style="font-size: 16px; color: rgb(18, 18, 18); font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif; line-height: 1.6;">有了线索，很容易看到，哪些实现进行了插件式管理。&nbsp;&nbsp;</span></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/T</summary>
      
    
    
    
    <category term="XGBoost 系列" scheme="https://xinrihui.github.io/categories/XGBoost-%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="xgboost" scheme="https://xinrihui.github.io/tags/xgboost/"/>
    
    <category term="源码分析" scheme="https://xinrihui.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>xgboost 源码调试</title>
    <link href="https://xinrihui.github.io/2022/12/04/xgboost%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/"/>
    <id>https://xinrihui.github.io/2022/12/04/xgboost%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/</id>
    <published>2022-12-04T14:46:31.000Z</published>
    <updated>2022-12-04T15:07:41.612Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="735407517@qq.com"/><meta name="created" content="2021-09-20 04:32:19 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="source-url" content="https://xgboost.readthedocs.io/en/latest/build.html#building-on-windows"/><meta name="updated" content="2021-10-10 14:29:42 +0000"/><title>xgboost 源码调试</title></head><body><div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-weight: bold; font-size: 12pt;">1.代码下载</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">下载github代码：</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">git clone --recursive</span> <a href="https://github.com/dmlc/xgboost" style="font-size: 12pt;">https://github.com/dmlc/xgboost</a></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="color: unset; font-family: unset; font-size: 12pt;">加上参数–recursive，会把xgboost依赖的submodule都clone下来，并放在xgboost主目录下。</span></div><div><span style="color: unset; font-family: unset; font-size: 12pt;">xgboost依赖以下4个模块：</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">dmlc-core：用于支撑DMLC机器学习项目的公共代码库</span></div><div><span style="font-size: 12pt;">rabit：封装了高度可依赖的Allreduce与Broadcast接口，用于分布式消息同步</span></div><div><span style="font-size: 12pt;">nccl：优化后的多GPU通信基础库</span></div><div><span style="font-size: 12pt;">cub：CUDA编程相关库</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-weight: bold; font-size: 12pt;">2.编译项目</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">mkdir build</span></div><div><span style="font-size: 12pt;">cd build</span></div><div><span style="font-size: 12pt;">cmake .. -G"Visual Studio 14 2015 Win64"</span></div><div><span style="font-size: 12pt;"># for VS15: cmake .. -G"Visual Studio 15 2017" -A x64# for VS16: cmake .. -G"Visual Studio 16 2019" -A x64</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">生成 .sln&nbsp;&nbsp;后缀的项目文件 (xgboost.sln)</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt; font-weight: bold;">3.使用 visual studio&nbsp;&nbsp;打开项目</span> <span style="font-size: 12pt;">(&nbsp;&nbsp; xgboost.sln&nbsp;&nbsp;)</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">（1）从 release&nbsp;&nbsp;模式 切换到 debug&nbsp;&nbsp;模式</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">（Relese版本无法看debug信息）</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">解决方案管理器 -&gt;</span></div><div><span style="font-size: 12pt;">(右键点击目标)项目--&gt;属性--&gt;配置管理器--&gt;活动解决方案配置--&gt;新建--&gt;Debug</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">项目--&gt;属性--&gt;配置管理器--&gt;活动解决方案平台--&gt;X64</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">项目 --&gt; 属性 --&gt; C/C++ --&gt; 常规 --&gt; 调试信息格式 --&gt; 程序数据库 (/Zi) 。</span></div><div><span style="font-size: 12pt;">项目 --&gt; 属性 --&gt; C/C++ --&gt; 常规 --&gt; 优化 --&gt; 优化 --&gt; 已禁用 (/Od)。</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;"><img src="/Resources/xgboost%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95.resources/101A99A1-D311-42B9-8C63-FBC385222E08.png" height="748" width="1627"/></span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">注意：是每个项目都要右键点击属性修改（如果有C/C++这个选项的话，因为有的项目点击属性后没有C++或者连接器，那就不用改了)</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">（2）添加 include 路径，解决代码中 #include&nbsp;&nbsp;找不到报错的问题</span></div><div><span style="font-size: 12pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style="font-size: 12pt;">项目 --&gt; 属性 --&gt; C/C++ --&gt; 附加包含目录。</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">增加了三项：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(SolutionDir)..\include\</span></div><div><span style="font-size: 12pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(SolutionDir)..\dmlc-core\include\</span></div><div><span style="font-size: 12pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(SolutionDir)..\rabit\include\</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-weight: bold; font-size: 12pt;">4.运行 CLI (C++接口 )&nbsp;&nbsp;的demo&nbsp;&nbsp;</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">（1）进入 xgboost\demo\CLI\binary_classification&nbsp;&nbsp;目录</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">cmd下运行 python&nbsp;&nbsp;脚本 生成数据</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">python mapfeat.py</span></div><div><span style="font-size: 12pt;">python mknfold.py agaricus.txt 1</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">其中mushroom.conf是要作为cli_main.cc的主函数参数传入的（其中数据路径的参数改成绝对路径不加引号）</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">（2） 右键xgboost项目-&gt;属性-&gt;配置属性-&gt;调试-&gt;命令行参数：mushroom.conf的绝对路径</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">调试命令行设置：项目 --&gt; 属性 --&gt;调试--&gt;命令行参数 。输入配置文件所在路径："E:\Machine Learning Projects\Libs\xgboost\xgboost\demo\CLI\binary_classification\mushroom.conf"</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="color: rgb(255, 0, 0); font-size: 12pt;">注意路径必须采用&nbsp;&nbsp;双引号&nbsp;&nbsp;包起来：</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;"><img src="/Resources/xgboost%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95.resources/7BDDB362-CAA8-4C75-AB76-947B6327A326.png" height="684" width="1108"/></span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">（3）程序中打断点，debug运行xgboost项目，注意只运行 runxgboost&nbsp;&nbsp;项目，不要 debug&nbsp;&nbsp;解决方案中的其他项目，即&nbsp;&nbsp;右键解决方案 ->&nbsp;&nbsp;属性，然后选择&nbsp;&nbsp;单项目启动（runxgboost）</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;"><img src="/Resources/xgboost%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95.resources/ED2F91F2-40B3-4958-B7D4-BF55B1A08B19.png" height="684" width="1106"/></span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">（4）点击调试按钮之后，出现File not found，导致调试终止</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">这里指的是agaricus.txt 文件找不到。</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">解决方法：将agaricus.txt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;agaricus.txt.test&nbsp;&nbsp;&nbsp;&nbsp;agaricus.txt.train 三个文件全都拷贝到和xgboost.sln同级目录即可即可</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-weight: bold; font-size: 12pt;">5.问题</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">1.&nbsp;&nbsp;问题：fatal error C1083: 无法打开包括文件: “xgboost/data.h”</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">这种错误就是找不到data.h文件，一般是inclue路径没设置对。</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">2.&nbsp;&nbsp;问题：LINK : fatal error LNK1561: 必须定义入口点 .&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">每一个应用程序(.exe文件)都需要一个程序入口点，就是main()函数，所以，自然，如果一个.exe文件没有main()函数，那么编译时，编译器就会报错：LINK 1561。</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="color: unset; font-family: unset; font-size: 12pt;">如果是.exe.文件，就需要检查自己的程序中是否有main()函数，没有的话，就要加上这个main()函数；</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">如果不需要编写.exe应用程序，那自然就可以将程序编译为静态链接库、或者动态链接库。</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">解决方法：项目 --&gt; 属性 --&gt;常规--&gt;配置类型。</span></div><div><font style="font-size: 12pt;"><br/></font></div><ul><li><div><span style="font-size: 12pt;">库项目 dmlccore、 rabit 、objxgboost 、xgboost 设置为&nbsp;&nbsp;动态库（可以进入调试）</span></div></li></ul><div><font style="font-size: 12pt;"><br/></font></div><ul><li><div><span style="font-size: 12pt;">入口项目 runxgboost 设置为.exe&nbsp;&nbsp;</span></div></li></ul><div><font style="font-size: 12pt;"><br/></font></div><ul><li><div><span style="font-size: 12pt;">即不是&nbsp;&nbsp;程序入口 也不是&nbsp;&nbsp;库&nbsp;&nbsp;的项目可以&nbsp;&nbsp;配置为 “生成文件”</span></div></li></ul><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;"><img src="/Resources/xgboost%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95.resources/1995CC35-558B-412D-B9BA-6589B45EAD2D.png" height="684" width="1106"/></span></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">3.问题： fatal error LNK1104: 无法打开文件“.........................\xgboost\build\objxgboost.dir\Debug\c_api.obj”</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">解决方法：在目录里搜“c_api.obj”，然后建立文件夹“.........................\xgboost\build\objxgboost.dir\Debug，然后将“c_api.obj”所在的目录中所有的文件都拷贝到“.........................\xgboost\build\objxgboost.dir\Debug 。</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">4.&nbsp;&nbsp;问题：点击调试按钮之后，出现File not found，导致调试终止</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">报错信息：E:\\Machine Learning Projects\\Libs\\xgboost\\xgboost\\src\\data\\data.cc:765: Encountered parser error</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">这里指的是agaricus.txt 文件找不到。</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">解决方法：将agaricus.txt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;agaricus.txt.test&nbsp;&nbsp;&nbsp;&nbsp;agaricus.txt.train 三个文件全都拷贝到和 xgboost.sln 同级目录即可</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">5.问题：在项目A调试时 进入不了&nbsp;&nbsp;另一个 项目B的代码</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">（1）B 必须设置为&nbsp;&nbsp;动态链接库</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">（2）在 配置属性-&gt;C/C++-&gt;常规-&gt;调试信息格式 选择 ：用于“编辑并继续”的程序数据库(/ZI)</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;"><img src="/Resources/xgboost%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95.resources/C9A908CC-6C26-4B5F-B15C-8AB9F29D51F6.png" height="684" width="1106"/></span></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-weight: bold; font-size: 12pt;">引用</span></div><div><a href="https://blog.csdn.net/matrix_zzl/article/details/78571349" style="font-size: 12pt;">https://blog.csdn.net/matrix_zzl/article/details/78571349</a></div><div><a href="https://xgboost.readthedocs.io/en/latest/build.html#building-on-windows" style="font-size: 12pt;">https://xgboost.readthedocs.io/en/latest/build.html#building-on-windows</a></div><div><a href="https://blog.csdn.net/zzzz_123123/article/details/103812161" style="font-size: 12pt;">https://blog.csdn.net/zzzz_123123/article/details/103812161</a><span style="font-size: 12pt;">（ windows&nbsp;&nbsp;下）</span></div><div><a href="https://github.com/dmlc/xgboost/tree/master/demo/CLI/binary_classification" style="font-size: 12pt;">https://github.com/dmlc/xgboost/tree/master/demo/CLI/binary_classification</a></div><div><font style="font-size: 12pt;"><br/></font></div></div><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/T</summary>
      
    
    
    
    <category term="XGBoost 系列" scheme="https://xinrihui.github.io/categories/XGBoost-%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="xgboost" scheme="https://xinrihui.github.io/tags/xgboost/"/>
    
    <category term="源码分析" scheme="https://xinrihui.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>小灰灰信息检索系统 - 附录 文件的存储管理</title>
    <link href="https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%20%E9%99%84%E5%BD%95%20%E6%96%87%E4%BB%B6%E7%9A%84%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
    <id>https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%20%E9%99%84%E5%BD%95%20%E6%96%87%E4%BB%B6%E7%9A%84%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</id>
    <published>2022-12-04T14:27:29.000Z</published>
    <updated>2022-12-04T14:29:16.418Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="羊村的好朋友小灰灰"/><meta name="created" content="2022-01-27 10:04:02 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="updated" content="2022-12-04 14:05:04 +0000"/><title>小灰灰信息检索系统 - 附录 文件的存储管理</title></head><body><div><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">问题：文件存储使用定长字段还是使用 变长字段 配 分隔符+换行符</span></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">变长字段 配 分隔符+换行符</span></div><ul><li><div><span style="font-size: 12pt;">字段的内容中 不能存在 分隔符 和 换行符，否则 切分行 和 切分 字段  的时候 会出错；</span></div></li></ul><div><span style="font-size: 12pt;">可以使用 </span> <span style="font-size: 12pt; font-weight: bold;">定界符</span><span style="font-size: 12pt;">（delimiter）来 界定字段的内容，并对 字段内容中的 特殊字符 进行转义处理，CSV 文件的规则为：</span></div><div><br/></div><div><span style="font-size: 12pt;">（1） 每条记录占一行 ，用换行符（\r\n）分隔；行中的字段 以逗号为分隔符，逗号前后的空格会被忽略</span></div><div><span style="font-size: 12pt;">（2）字段中包含有 逗号 、换行符 中的任意 一个 ，该字段 必须用</span> <span style="font-size: 12pt; font-weight: bold;">双引号（定界符）</span> <span style="font-size: 12pt;">括起来</span></div><div><span style="font-size: 12pt;">（3）字段前后包含有空格，该字段必须用 双引号括起来</span></div><div><span style="font-size: 12pt;">（4）字段中的双引号 用两个双引号 表示（转义）</span></div><div><br/></div><div><span style="font-size: 12pt;">我们在 csv 文件 中 填写的内容如下：    </span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td height="18" style="height: 13.8pt; width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">1001</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">    abc</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">  ,abc  "c"  </span></div></td></tr><tr><td height="18" style="height: 13.8pt; width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">1002</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;"> a,b</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><br/></div></td></tr></tbody></table><div><span style="font-size: 12pt;">实际的 csv 文件存储为：</span></div><div><span style="font-size: 12pt;">1001,    abc,"  ,abc  ""c""  "</span></div><div><span style="font-size: 12pt;">1002," a,b",</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%20%E9%99%84%E5%BD%95%20%E6%96%87%E4%BB%B6%E7%9A%84%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86.resources/A79FCE2F-86FC-4B31-92C7-6E5997FABF2A.png" height="128" width="838"/><br/></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">灵活性好，字段的长度 可以任意变化 ，但是 一般 数据库在 建表时 会给 字段 设定一个 字节长度的上限 （与数据库的 块的大小有关）</span></div></li><li><div><span style="font-size: 12pt;">直接查看 文件内容  十分方便</span></div></li></ul><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">定长字段 </span></div><ul><li><div><span style="font-size: 12pt;">字段的内容 可以是任意字符</span></div></li><li><div><span style="font-size: 12pt;">灵活性较差，字段定义的过大 将浪费存储空间，字段定义的过短，可能以后放不下；可以采用</span> <span style="font-size: 12pt; font-weight: bold;">字段的字节长度（定长）+字段内容</span><span style="font-size: 12pt;"> 来存储 长度变化非常大的字段</span></div></li><li><div><span style="font-size: 12pt;">没有 分隔符 + 换行符， 直接查看 文件的内容 不便 </span></div></li><li><div><span style="font-size: 12pt;">每一行定长，行中的每一个字段都定长，可以快速的通过文件指针 取到 指定的行 和指定的字段，eg. 第10行中的 第1个字段。</span></div></li></ul><div><span style="font-size: 12pt;">        而 采用变长字段 则肯能 要把 整个文件读入内存 才能找到 指定的行和字段。 </span></div><div><span style="font-size: 12pt;">        因此，关系数据库 采用 定长字段 而 NoSQL  eg. hive 采用 变长字段 </span></div><div><span style="font-size: 12pt;"><br/></span></div><div><br/></div><hr/><div><br/></div><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">问题：如何在文本中存储小数类型的字段</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">使用 保留的小数位数 + 不带 小数点的 字节数组 表示</span></div></li></ul><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">小数位数Int（1B）</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">小数内容 Int（8B）</span></div></td></tr><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">2</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">12345</span></div></td></tr></tbody></table><div><span style="font-size: 12pt;">读取的时候 ，补上小数点即可： 123.45</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">使用 字符串 表示：</span></div></li></ul><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/></colgroup><tbody><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">小数 string（16B）</span></div></td></tr><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">123.45</span></div></td></tr></tbody></table><div><span style="font-size: 12pt;">综上，在文本中 以字节存储  只有两种类型可选：（1）整数类型 ，1B 可以表示 0-256 范围的整数 ；（2）字符类型，1B 表示一个 字符（以ASCII 编码）   </span></div></div><hr/><hr/><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="从零开始搭建搜索引擎" scheme="https://xinrihui.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="倒排索引" scheme="https://xinrihui.github.io/tags/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    
    <category term="bm25" scheme="https://xinrihui.github.io/tags/bm25/"/>
    
    <category term="tf-idf" scheme="https://xinrihui.github.io/tags/tf-idf/"/>
    
  </entry>
  
  <entry>
    <title>小灰灰信息检索系统 - 5.查询</title>
    <link href="https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%205.%E6%9F%A5%E8%AF%A2/"/>
    <id>https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%205.%E6%9F%A5%E8%AF%A2/</id>
    <published>2022-12-04T14:27:28.000Z</published>
    <updated>2022-12-04T14:29:16.412Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="羊村的好朋友小灰灰"/><meta name="created" content="2022-01-27 10:28:18 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="updated" content="2022-12-04 13:59:55 +0000"/><title>小灰灰信息检索系统 - 5.查询</title></head><body><div><div><div><span style="font-size: 12pt; color: unset; font-family: unset;">前面三个阶段的处理，只是为了最后的查询做铺垫。因此，现在我们就要利用之前产生的几个文件，来实现最终的用户搜索功能。</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">doc_id.bin：记录网页链接和编号之间的对应关系。</span></div></li><li><div><span style="font-size: 12pt;">term_id.bin：记录单词和编号之间的对应关系。</span></div></li><li><div><span style="font-size: 12pt;">index.bin：倒排索引文件，记录每个单词编号以及对应包含它的网页编号列表。</span></div></li><li><div><span style="font-size: 12pt;">term_offsert.bin：记录每个单词编号在倒排索引文件中的偏移位置。</span></div></li></ul><div><br/></div><div><span style="font-size: 12pt;">这四个文件中，除了倒排索引文件（index.bin）比较大之外，其他的都比较小。为了方便快速查找数据，我们将其他三个文件都加载到内存中，并且组织成散列表这种数据结构。</span></div><div><br/></div><div><span style="font-size: 12pt;">当用户在搜索框中，输入某个查询文本的时候，我们先对用户输入的文本进行分词处理。假设分分词之后，我们得到 k 个单词。</span></div><div><br/></div><div><span style="font-size: 12pt;">我们拿这 k 个单词，去 term_id.bin 对应的散列表中，查找对应的单词编号。经过这个查询之后，我们得到了这 k 个单词对应的单词编号。</span></div><div><br/></div><div><span style="font-size: 12pt;">我们拿这 k 个单词编号，去 term_offset.bin 对应的散列表中，查找每个单词编号在倒排索引文件中的偏移位置。经过这个查询之后，我们得到了 k 个偏移位置。</span></div><div><br/></div><div><span style="font-size: 12pt;">我们拿这 k 个偏移位置，去倒排索引（index.bin）中，查找 k 个单词对应的包含它的网页编号列表。经过这一步查询之后，我们得到了 k 个网页编号列表。</span></div><div><br/></div><div><span style="font-size: 12pt;">我们针对这 k 个网页编号列表，统计每个网页编号出现的次数。具体到实现层面，我们可以借助散列表来进行统计。统计得到的结果，我们按照出现次数的多少，从小到大排序。出现次数越多，说明包含越多的用户查询单词（用户输入的搜索文本，经过分词之后的单词）。</span></div><div><br/></div><div><span style="font-size: 12pt;">经过这一系列查询，我们就得到了一组排好序的网页编号。我们拿着网页编号，去 doc_id.bin 文件中查找对应的网页链接，分页显示给用户就可以了。</span></div><div><br/></div><div><span style="font-size: 16px;"><br/></span></div><hr/><div><span style="font-size: 16px;"><br/></span></div><div><span style="font-size: 12pt; font-weight: bold;">1.方案A</span><span style="font-size: 12pt; font-weight: bold;">（续上述方案A）：</span></div><div><br/></div><div><span style="font-size: 12pt;">查询层 即将 使用的 前面 准备的文件</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">doc_raw.bin：原始网页的 文件</span></div></li><li><div><span style="font-size: 12pt;">doc_raw_offset.bin ：记录 每一个文档的 ID 和它在 doc_raw.bin 中的 偏移位置</span></div></li><li><div><span style="font-size: 12pt;">doc_raw_offset.bin ： 记录 每一个 文档ID 和它对应的 url ，根据 文档ID 查找得到 文档的url</span></div></li><li><div><span style="font-size: 12pt;">term_id.bin：记录单词 和 编号之间的对应关系</span></div></li><li><div><span style="font-size: 12pt;">inver_term_id.bin： 记录 单词编号 和 单词的关系</span></div></li><li><div><span style="font-size: 12pt;">index.bin：倒排索引文件，记录每个单词编号以及对应包含它的网页编号列表</span></div></li><li><div><span style="font-size: 12pt;">term_offsert.bin：记录每个单词编号在倒排索引文件中的偏移位置</span></div></li><li><div><span style="font-size: 12pt;">doc_termsNums.bin: 文档的词项 总数文件 ,每一个文档的  词项的总数 （可以作为 文档的长度）</span></div></li></ul><div><br/></div><div><span style="font-size: 12pt;">（1）用户查询解析 ，提取关键词项后  在倒排索引中检索关键词项，取得 候选网页文档</span></div><div><br/></div><ol><li><div><span style="font-size: 12pt;">当用户在搜索框中，输入某个查询文本的时候，我们先对用户输入的文本进行分词处理 后，并过滤 stop_words后 得到 k 个 词项（关键词）。</span></div></li><li><div><span style="font-size: 12pt;">拿这 k 个单词，去 term_id.bin 对应的散列表中，查找对应的单词编号。</span></div></li><li><div><span style="font-size: 12pt;">拿这 k 个单词编号，去 term_offset.bin 对应的散列表中，查找每个单词编号在倒排索引文件中的偏移位置。</span></div></li><li><div><span style="font-size: 12pt;">拿这 k 个偏移位置，去倒排索引 index.bin 中，查找 k 个单词 对应的包含 它的网页编号列表。最后 我们得到了  n 个 候选 网页文档 集合。</span></div></li></ol><div><br/></div><div><span style="font-size: 12pt;">倒排索引</span></div><div><span style="font-size: 12pt;">termA -&gt; doc1, doc2 , doc3</span></div><div><span style="font-size: 12pt;">termB  -&gt; doc2, doc4</span></div><div><span style="font-size: 12pt;">termC  -&gt; doc5</span></div><div><br/></div><div><span style="font-size: 12pt;">用户 查询的 关键 词项：{ termA , termB}</span></div><div><span style="font-size: 12pt;">候选网页文档 集合 :  {doc1, doc2 , doc3, doc4 }</span></div><div><br/></div><div><span style="font-size: 12pt;">（2）对 候选文档集合 利用 信息检索模型（向量空间模型） 进行打分并排序</span></div><div><br/></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%205.%E6%9F%A5%E8%AF%A2.resources/0639DAF8-2A83-4A91-A786-1329F4569DF8.png" height="436" width="571"/><br/></div><div>（《信息检索导论》-&gt; chapter7 -&gt;7.1）</div><div><br/></div><div>遍历每一个查询词，对查询词对应的 倒排记录表（posting list）中的每一个 ( 文档 , tf 值 ) 对 的 tf 值累加到 文档的分数向量(Scores) 中</div><div><br/></div><div>算法结束后，文档分数 Scores = [<span style="font-size: 12pt;">W1, </span><span style="font-size: 12pt;">W2, </span><span style="font-size: 12pt;">W3, </span> <span style="font-size: 12pt;">W4</span>]</div><div>其中，</div><div><span style="font-size: 12pt;">对 doc1 的打分为：</span></div><div><span style="font-size: 12pt;">W1= w( termA ,doc1) + w( termB , doc1 )   （ termB 未在 doc1 中出现过 ，第二项为 0 ）</span></div><div><br/></div><div><span style="font-size: 12pt;">对 doc2 的打分为：</span></div><div><span style="font-size: 12pt;">W2= w( termA ,doc2) + w( termB , doc2 ) </span></div><div><br/></div><div><span style="font-size: 12pt;">其中 w ( term , doc) 可以 有多种选择 ，如 tf-idf 和 BM25</span></div><div><br/></div><div><br/></div><ul><li><div><span style="font-size: 12pt; font-weight: bold;">TF-IDF</span></div></li></ul><div><br/></div><div><span style="font-size: 12pt;">w( termA ,doc1) = termA </span><span style="font-size: 12pt; color: rgb(255, 0, 0);">在doc1 中的词频</span> <span style="font-size: 12pt; color: rgb(255, 0, 0);">TF</span><span style="font-size: 12pt;">  *  termA  的逆文档频率 IDF</span></div><div><br/></div><div><span style="font-size: 12pt;">*注意：此处的 词频为 该词在 文档中的频率 而不是 该词在整个语料库中的频率</span></div><div><br/></div><div><span style="font-size: 12pt;">逆文档频率（IDF）=log（ 语料库文档总数/（包含该词的文档数+1）），之所以要+1是为了防止分母为0。由此可见，当一个词被越多的文档包含，则IDF值就越小，也就是所这个词很常见，不是最重要的能区分文章特性的关键词。</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt; font-weight: bold;">BM25</span></div></li></ul><div><br/></div><div><span style="font-size: 12pt;">给定一个查询Q和一篇文档d，d对Q的BM25得分公式为：</span></div><div><br/></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%205.%E6%9F%A5%E8%AF%A2.resources/8EC98291-3A72-4F0E-87E0-A8D280271E2F.png" height="563" width="962"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">第一个公式 是外部公式，一个查询Q可能包含多个词项，比如“苹果手机”就包含“苹果”和“手机”两个词项，我们需要分别计算“苹果”和“手机”对某个文档d的贡献分数w(t,d)，然后将他们加起来就是整个文档d相对于查询Q的得分。</span></div><div><br/></div><div><span style="font-size: 12pt;">第二个公式 就是计算某个词项t在文档d中的得分，它包括三个部分：</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">第一个部分 是词项t在查询Q中的得分，比如查询“中国人说中国话”中“中国”出现了两次，此时 qtf=2，说明这个查询希望找到的文档和“中国”更相关，“中国”的权重应该更大，但是通常情况下，查询Q都很短，而且不太可能包含相同的词项，所以这个因子是一个常数，我们在实现的时候可以忽略。</span></div></li></ul><div><br/></div><ul><li><div><span style="font-size: 12pt;">第二部分 类似于 TFIDF 模型中的 TF 项。也就是说某个 词项t 在 文档d 中出现次数越多，则 t 越重要，但是文档长度越长，tf也倾向于变大，所以使用文档长度除以平均长度：</span> <span style="font-size: 12pt; color: rgb(255, 0, 0);">ld / avg_l</span><span style="font-size: 12pt;">  起到某种归一化的效果，k1 和 b 是可调参数。</span></div></li></ul><div><br/></div><ul><li><div><span style="font-size: 12pt;">第三部分 类似于 TFIDF 模型中的 IDF 项。也就是说虽然“的”、“地”、“得”等停用词在某文档d中出现的次数很多，但是他们在很多文档中都出现过，所以这些词对d的贡献分并不高，接近于0；反而那些很稀有的词如”糖尿病“能够很好的区分不同文档，这些词对文档的贡献分应该较高。</span></div></li></ul><div><br/></div><div><span style="font-size: 12pt;">所以根据BM25公式，我们可以很快计算出不同 文档t 对 查询Q 的得分情况，然后按得分高低排序给出结果。</span></div><div><br/></div></div><div><br/></div><div><br/></div><hr/><div><br/></div><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">问题：在结果显示的时候 增加 摘要信息和网页快照。</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">摘要信息</span></div></li></ul><div><br/></div><div><span style="font-size: 12pt;">增加 summary.bin 和 summary_offset.bin。在抽取网页文本信息后，取出前 80-160 个字作为摘要，写入到 summary.bin，并将偏移位置写入到 summary_offset.bin。</span></div><div><br/></div><div><span style="font-size: 12pt;">summary.bin 格式：</span></div><div><span style="font-size: 12pt;">doc_id \t summary_size \t summary \r\n\r\n</span></div><div><span style="font-size: 12pt;">summary_offset.bin 格式：</span></div><div><span style="font-size: 12pt;">doc_id \t offset \r\n</span></div><div><span style="font-size: 12pt;">Google 搜索结果中显示的摘要是搜索词附近的文本。如果要实现这种效果，可以保存全部网页文本，构建搜索结果时，在网页文本中查找搜索词位置，截取搜索词附近文本。</span></div><div><br/></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">网页快照</span></div></li></ul><div><span style="font-size: 12pt;">可以把 doc_raw.bin 当作快照，增加 doc_raw_offset.bin 记录 doc_id 在 doc_raw.bin 中的偏移位置。</span></div><div><span style="font-size: 12pt;">doc_raw_offset.bin 格式：</span></div><div><span style="font-size: 12pt;">doc_id \t offset \r\n</span></div><div><br/></div><div><br/></div><div><br/></div></div><hr/><hr/><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="从零开始搭建搜索引擎" scheme="https://xinrihui.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="倒排索引" scheme="https://xinrihui.github.io/tags/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    
    <category term="bm25" scheme="https://xinrihui.github.io/tags/bm25/"/>
    
    <category term="tf-idf" scheme="https://xinrihui.github.io/tags/tf-idf/"/>
    
  </entry>
  
  <entry>
    <title>小灰灰信息检索系统 - 4.建立倒排索引</title>
    <link href="https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%204.%E5%BB%BA%E7%AB%8B%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    <id>https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%204.%E5%BB%BA%E7%AB%8B%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/</id>
    <published>2022-12-04T14:27:27.000Z</published>
    <updated>2022-12-04T14:29:16.426Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="羊村的好朋友小灰灰"/><meta name="created" content="2022-01-27 09:53:22 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="updated" content="2022-12-04 13:59:03 +0000"/><title>小灰灰信息检索系统 - 4.建立倒排索引</title></head><body><div><div><div><div><br/></div><div><span style="font-size: 12pt;">索引阶段主要负责将分析阶段产生的临时索引，构建成倒排索引。倒排索引（ Inverted index）中记录了每个单词以及包含它的网页列表。</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%204.%E5%BB%BA%E7%AB%8B%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.resources/6115A876-5314-42A6-9327-C5A433C1E8D3.jpg" height="665" width="1142"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">我们刚刚讲到，在临时索引文件中，记录的是单词跟每个包含它的文档之间的对应关系。那如何通过临时索引文件，构建出倒排索引文件呢？</span></div><div><br/></div><div><span style="font-size: 12pt;">解决这个问题的方法有很多。考虑到</span> <span style="font-size: 12pt; font-weight: bold;">临时索引文件很大</span><span style="font-size: 12pt;">，</span><span style="font-size: 12pt; font-weight: bold;">无法一次性加载到内存中</span><span style="font-size: 12pt;">，搜索引擎一般会选择使用</span> <span style="font-size: 12pt; font-weight: bold;">多路归并排序</span> <span style="font-size: 12pt;">的方法来实现。</span></div><div><br/></div><div><span style="font-size: 12pt;">因为临时索引很大，所以一般基于内存的排序算法就没法处理这个问题了。我们可以用之前讲到的归并排序的处理思想，将其分割成多个小文件，先对每个小文件独立排序，最后再合并在一起。当然，实际的软件开发中，我们其实可以直接利用  MapReduce 来处理。</span></div><div><br/></div><div><span style="font-size: 12pt;">临时索引文件排序完成之后，相同的单词就被排列到了一起。</span><span style="font-size: 12pt; font-weight: bold;">我们只需要顺序地遍历排好序的临时索引文件，就能将每个单词对应的网页编号列表找出来，然后把它们存储在倒排索引文件中</span><span style="font-size: 12pt;">。</span></div><div><br/></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%204.%E5%BB%BA%E7%AB%8B%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.resources/AC885451-0DA1-4E7E-AD7E-7C3AA32FE133.jpg" height="711" width="1142"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">除了倒排文件之外，我们还需要一个文件，来记录每个单词编号在倒排索引文件中的偏移位置。我们把这个文件命名为 term_offset.bin。这个文件的作用是，帮助我们快速地查找某个单词编号在倒排索引中存储的位置，进而快速地从倒排索引中读取单词编号对应的网页编号列表。</span></div><div><br/></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%204.%E5%BB%BA%E7%AB%8B%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.resources/AAF23CE0-CE6E-4BC2-9CB4-E804E7503CDE.jpg" height="553" width="1142"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">经过索引阶段的处理，我们得到了两个有价值的文件，</span></div><div><span style="font-size: 12pt;">它们分别是</span> <span style="font-size: 12pt; font-weight: bold;">倒排索引文件（index.bin）</span><span style="font-size: 12pt;">和 记录单词编号在索引文件中的</span> <span style="font-size: 12pt; font-weight: bold;">偏移位置的文件（term_offset.bin）</span><span style="font-size: 12pt;">。</span></div><div><br/></div><hr/><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">问题：如何构建基础的倒排索引  并 在此基础上增加tf-idf</span></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">1.基础的倒排索引构建</span></div><div><br/></div><div><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">1.1基于多路归并排序（方案A）</span></div><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 12pt;">把 临时索引文件 拆分为 多个小文件，对每个 小文件在内存中 按照 term_id 进行排序，最后再将 这几个排好序的小文件  进行一次 基于磁盘的 多路归并 排序。</span></div><div><br/></div><div><span style="font-size: 12pt;">排序后的 临时索引 的文件（ sorted_tmp_index.bin）设计结构如下： </span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0-3</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">4 -7</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">8-11</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">12-15</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">term_id1（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id1（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">term_id1（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id2（4B）</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">值</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">2</span></div></td></tr></tbody></table><div><br/></div><div><br/></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%204.%E5%BB%BA%E7%AB%8B%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.resources/AC885451-0DA1-4E7E-AD7E-7C3AA32FE133.jpg" height="711" width="1142"/><br/></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">1.2 基于 spark 排序</span><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">（方案B）</span></div><div><br/></div><div><span style="font-size: 12pt;">1.把 整个 临时索引文件 存入 HDFS 中</span></div><div><br/></div><div><span style="font-size: 12pt;">2.利用 spark 直接 对 整个 临时索引文件 进行 排序</span></div><div><br/></div><div><span style="font-size: 12pt;">但是 spark 的读取文件的 API  sc.textFile()  的 内部实现是： </span></div><div><span style="font-size: 12pt;">（1） 对大文件进行切片，这些文件切片 交由 不同的 计算节点 进行处理；</span></div><div><br/></div><div><span style="font-size: 12pt;">（2） 在 计算 节点上，对在自己这里的 文件切片 以行为最小单位 进行解析，每一行 形成一个 K-V 对，然后进行接下来的计算 ；</span></div><div><br/></div><div><span style="font-size: 12pt;">而我们 上述 临时索引文件（tmp_index.bin）的 设计 并没有采用 使用 分隔符 和 换行符 的方案，而是采用了 定长（字节长度）字段 的 方案，如果要使用 spark ，则需要 修改 sc.textFile()  的实现</span></div><div><br/></div><div><span style="font-size: 12pt;">为了解决上述问题，我们 修改了 临时索引文件（tmp_index.bin）的结构 如下：</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%204.%E5%BB%BA%E7%AB%8B%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.resources/E57A10BF-3387-41D3-967F-AF7FDBB661C0.jpg" height="596" width="1142"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">使用换行符 ' \r\n' 来区分行，每一行代表了 一个 ( term_id , doc_id )，term_id 和 doc_id 用 分隔符 '\t' 进行区分</span></div><div><br/></div><div><span style="font-size: 12pt;">对比 新生成的 方便 spark 读取 的临时索引文件 tmp_index_spark.bin （65.3MB）和原来的 </span> <span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 12pt; color: rgb(0, 0, 0); font-family: 微软雅黑; font-variant-caps: normal; font-variant-ligatures: normal;">tmp_index.bin （53.9MB），大小还是变大了</span></div><div><br/></div><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">注意</span><span style="font-size: 12pt; color: rgb(255, 0, 0);">：</span> <span style="font-size: 12pt;">pycharm 查看 超过 50MB 的文本会显示 不全，建议使用 notepad++</span></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">引用</span></div><div><a href="http://dblab.xmu.edu.cn/blog/1708-2/" style="font-size: 12pt;">http://dblab.xmu.edu.cn/blog/1708-2/</a></div><div><a href="https://www.jianshu.com/p/a47b2452e4f6" style="font-size: 12pt;">https://www.jianshu.com/p/a47b2452e4f6</a></div><div><br/></div><div><span style="font-size: 12pt;">windows 下安装 spark 开发环境</span></div><div><a href="https://medium.com/big-data-engineering/how-to-install-apache-spark-2-x-in-your-pc-e2047246ffc3" style="font-size: 12pt;">https://medium.com/big-data-engineering/how-to-install-apache-spark-2-x-in-your-pc-e2047246ffc3</a></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">2.引入 TF-IDF=TF * IDF</span></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">公式：</span></div><div><span style="font-size: 12pt;">词频（TF）= 某词项 出现次数/ 文章中 词项总数 （  词频（TF）=某关键词出现次数 /文章中出现最多次数关键词的出现次数  ）</span></div><div><br/></div><div><span style="font-size: 12pt;">逆文档频率（IDF）= log（ 语料库文档总数 /（包含该词的文档数+1）），</span></div><div><br/></div><div><span style="font-size: 12pt;">（1）计算IDF需要一个语料库。</span></div><div><span style="font-size: 12pt;">（2）之所以要+1是为了防止分母为0。</span></div><div><span style="font-size: 12pt;">（3）当一个词被越多的文档包含，则 IDF 值就越小，也就是所这个词很常见，不是最重要的能区分文章特性的关键词。</span></div><div><br/></div><div><span style="font-size: 12pt;">TF-IDF 并没有考虑词语的语义信息，无法处理 一词多义 与 一义多词的情况。</span></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold; font-family: unset;">方案A：（续上述方案A）</span><br/></div><div><br/></div><div><span style="font-size: 12pt;">TF-IDF 放在倒排索引里 做第一级的排序 ，</span><span style="font-size: 12pt; font-weight: bold;">倒排索引文件（index.bin）</span><span style="font-size: 12pt;"> 的结构 如下：</span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 158px;"/><col style="width: 162px;"/><col style="width: 130px;"/><col style="width: 170px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0-3</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 158px; padding: 8px;"><div><span style="font-size: 12pt;">4 -7</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 162px; padding: 8px;"><div><span style="font-size: 12pt;">8-11</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">12-15</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 170px; padding: 8px;"><div><span style="font-size: 12pt;">16-19</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">20-23</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><br/></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">term_id（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 158px; padding: 8px;"><div><span style="font-size: 12pt;">doc_num（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 162px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id1（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">term_num1（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 170px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id2（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">term_num2（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><br/></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">值</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 158px; padding: 8px;"><div><span style="font-size: 12pt;">2</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 162px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">2</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 170px; padding: 8px;"><div><span style="font-size: 12pt;">2</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">3</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><br/></div></td></tr></tbody></table><div><span style="font-size: 12pt;">其中 ，</span></div><ul><li><div><span style="font-size: 12pt;">doc_num 为 一共有 多少文档出现了 term_id 这个单词，可以利用它计算 IDF</span></div></li><li><div><span style="font-size: 12pt;">term_num1 为 term_id 在 doc_id1 中出现了 多少次，可以利用它计算 TF </span></div></li></ul><div><br/></div><div><span style="font-size: 12pt;">记录单词编号在 索引文件中的  </span><span style="font-size: 12pt; font-weight: bold;">偏移位置的文件（term_offset.bin）</span> <span style="font-size: 12pt;">，文件结构如下：</span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 188px;"/></colgroup><tbody><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0-3</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 188px; padding: 8px;"><div><span style="font-size: 12pt;">4 -7</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">term_id（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 188px; padding: 8px;"><div><span style="font-size: 12pt;">term_id_offset（4B）</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">值</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 188px; padding: 8px;"><div><span style="font-size: 12pt;">0</span></div></td></tr></tbody></table><div><br/></div><div><span style="font-size: 12pt;">为计算 TF ，需要 知道 每一个文档的  词项的总数 （可以作为 文档的长度），</span><span style="font-size: 12pt; font-weight: bold;">文档的词项 总数文件（</span> <span style="font-size: 12pt; font-weight: bold;">doc_termsNums</span><span style="font-size: 12pt; font-weight: bold;">.bin ）</span><span style="font-size: 12pt;">的结构如下：</span></div><div><span style="font-size: 12pt;">{ doc_id : num }</span></div><div><span style="font-size: 12pt;">在 未排序的临时索引 的文件（tmp_index.bin）中，第二列  doc_id  是有序的：</span></div><div><br/></div><div><span style="font-size: 12pt;">tmp_index.bin</span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">term_id</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">doc_id</span></div></td></tr><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">1</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">1</span></div></td></tr><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">0</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">1</span></div></td></tr><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">2</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">1</span></div></td></tr><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">3</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">1</span></div></td></tr><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">4</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">1</span></div></td></tr></tbody></table><div><span style="font-size: 12pt;">由此可得 doc1  的 总的词项数</span></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">方案B：（续上述方案B）</span></div><div><br/></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">引用</span></div><div><a href="https://blog.csdn.net/xuyaoqiaoyaoge/article/details/47172151" style="font-size: 12pt;">https://blog.csdn.net/xuyaoqiaoyaoge/article/details/47172151</a></div></div><div><br/></div><div><br/></div><hr/><div><br/></div><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">问题：因为爬虫在不断爬取新的网页，如果 有新的文档 里包含了 词项1 ，则需要 更新 词项1 的 倒排记录 ，如何在不重写整个 </span><span style="font-size: 12pt; color: rgb(255, 0, 0);">倒排索引文件 的前提下，进行 </span><span style="font-size: 12pt; color: rgb(255, 0, 0);">更新？</span></div><div><br/></div><div><span style="font-size: 12pt;">（1）利用数据库 做 外存 的管理：将存储空间划分为页，记录 写入 固定大小的页中，数据库管理这些页，包括对 页进行索引、 页的分裂 和 合并（B+树）</span></div><div><br/></div><div><span style="font-size: 12pt;">（2）每一次都 将  单词1 对应的新的 倒排记录 追加在文件的末尾，并 更新 单词1 的偏移位置；</span></div><div><br/></div><div><span style="font-size: 12pt;">但是，上述 方案 会造成  倒排索引文件 的无效内容过多，浪费存储空间；</span></div><div><span style="font-size: 12pt;">由前文可知 更新文件中的特定的一行记录 不太现实， 此场景下 使用 数据库 十分合适； </span></div><div><span style="font-size: 12pt;">词项的 倒排表  会越来 越长，而且 一般使用 词项 进行 K-V 查找，所以  可以 使用 redis + hbase  来存储 倒排索引表 </span></div><div><br/></div></div><hr/><div><br/></div></div><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">问题： 如何 用 tf-idf 计算 两个 doc 的相似度</span></div><div><br/></div><div><span style="font-size: 12pt;">基于词的TF -IDF 使用 sklearn 的  TfidfVectorizer 包，</span></div><div><span style="font-size: 12pt;">每个句子是一个 BOW （词袋模型）向量，向量中的每一维是 某个词的 TF-IDF 值</span></div><div><br/></div><div><span style="font-size: 12pt;">求两个 句子 对应的 向量的 余弦 相似度，即为 两个 doc 的相似度</span></div><div><br/></div><div><br/></div><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="从零开始搭建搜索引擎" scheme="https://xinrihui.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="倒排索引" scheme="https://xinrihui.github.io/tags/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    
    <category term="bm25" scheme="https://xinrihui.github.io/tags/bm25/"/>
    
    <category term="tf-idf" scheme="https://xinrihui.github.io/tags/tf-idf/"/>
    
  </entry>
  
  <entry>
    <title>小灰灰信息检索系统 - 3.信息抽取和创建临时索引</title>
    <link href="https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%203.%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96%E5%92%8C%E5%88%9B%E5%BB%BA%E4%B8%B4%E6%97%B6%E7%B4%A2%E5%BC%95/"/>
    <id>https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%203.%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96%E5%92%8C%E5%88%9B%E5%BB%BA%E4%B8%B4%E6%97%B6%E7%B4%A2%E5%BC%95/</id>
    <published>2022-12-04T14:27:26.000Z</published>
    <updated>2022-12-04T14:29:16.421Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="羊村的好朋友小灰灰"/><meta name="created" content="2022-01-27 09:37:29 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="updated" content="2022-02-14 11:43:31 +0000"/><title>小灰灰信息检索系统 - 3.信息抽取和创建临时索引</title></head><body><div><div><br/></div><div><br/></div><div><span style="font-size: 12pt;">网页爬取下来之后，我们需要对网页进行离线分析。分析阶段主要包括两个步骤，第一个是抽取网页文本信息，第二个是分词并创建临时索引。</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">抽取网页文本信息</span></div></li></ul><div><br/></div><div><span style="font-size: 12pt;">网页是半结构化数据，里面夹杂着各种标签、JavaScript 代码、CSS 样式。对于搜索引擎来说，它只关心网页中的文本信息，也就是，网页显示在浏览器中时，能被用户肉眼看到的那部分信息。我们如何从半结构化的网页中，抽取出搜索引擎关系的文本信息呢？</span></div><div><br/></div><div><span style="font-size: 12pt;">我们之所以把网页叫作半结构化数据，是因为它本身是按照一定的规则来书写的。这个规则就是 HTML 语法规范。我们依靠 HTML 标签来抽取网页中的文本信息。这个抽取的过程，大体可以分为两步。</span></div><div><br/></div><div><span style="font-size: 12pt;">第一步是去掉 JavaScript 代码、CSS 格式以及下拉框中的内容（因为下拉框在用户不操作的情况下，也是看不到的）。也就是，，这三组标签之间的内容。我们可以 利用 AC 自动机这种 多模式串匹配算法，在网页这个大字符串中，一次性查找, ,</span></div><div><br/></div><div><span style="font-size: 12pt;">第二步是去掉所有 HTML 标签。这一步也是通过字符串匹配算法来实现的。过程跟第一步类似，我就不重复讲了。</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">分词并创建临时索引</span></div></li></ul><div><br/></div><div><span style="font-size: 12pt;">经过上面的处理之后，我们就从网页中抽取出了我们关心的文本信息。接下来，我们要对文本信息进行分词，并且创建临时索引。</span></div><div><br/></div><div><span style="font-size: 12pt;">对于英文网页来说，分词非常简单。我们只需要通过空格、标点符号等分隔符，将每个单词分割开来就可以了。但是，对于中文来说，分词就复杂太多了。我这里介绍一种比较简单的思路，基于字典和规则的分词方法。</span></div><div><br/></div><div><span style="font-size: 12pt;">其中，字典也叫词库，里面包含大量常用的词语（我们可以直接从网上下载别人整理好的）。我们借助词库并采用</span><span style="font-size: 12pt; color: rgb(255, 0, 0);">最长匹配规则</span><span style="font-size: 12pt;">，来对文本进行分词。所谓最长匹配，也就是匹配尽可能长的词语。我举个例子解释一下。</span></div><div><br/></div><div><span style="font-size: 12pt;">比如要分词的文本是“中国人民解放了”，我们词库中有“中国”“中国人”“中国人民”“中国人民解放军”这几个词，那我们就取最长匹配，也就是“中国人民”划为一个词，而不是把“中国”、“中国人“划为一个词。具体到实现层面，我们可以将词库中的单词，构建成 Trie 树结构，然后拿网页文本在 Trie 树中匹配。</span></div><div><br/></div><div><span style="font-size: 12pt;">每个网页的文本信息在分词完成之后，我们都得到一组单词列表。我们把单词与网页之间的对应关系，写入到 一个</span> <span style="font-size: 12pt; font-weight: bold;">临时索引文件&nbsp;&nbsp;</span><span style="font-size: 12pt; font-weight: bold;">（tmp_Index.bin）</span><span style="font-size: 12pt;">中，这个临时索引文件（只有一个还很大）用来构建倒排索引文件。临时索引文件的格式如下：</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%203.%E4%BF%A1%E6%81%AF%E6%8A%BD%E5%8F%96%E5%92%8C%E5%88%9B%E5%BB%BA%E4%B8%B4%E6%97%B6%E7%B4%A2%E5%BC%95.resources/3268835C-0062-494E-A430-B772A239F87B.jpg" height="596" width="1142"/></div><div><br/></div><div><span style="font-size: 12pt;">在临时索引文件中，我们存储的是单词编号，也就是图中的 term_id，而非单词本身。这样做的目的主要是为了节省存储的空间。</span></div><div><br/></div><div><span style="font-size: 12pt;">给单词编号的方式，跟给网页编号类似。我们维护一个&nbsp;&nbsp;</span><span style="font-size: 12pt; color: rgb(255, 0, 0);">计数器</span><span style="font-size: 12pt;">，每当从网页文本信息中分割出一个新的单词的时候，我们就从计数器中取一个编号，分配给它，然后计数器加一。</span></div><div><br/></div><div><span style="font-size: 12pt;">在这个过程中，我们还需要使用散列表，记录已经编过号的单词。在对网页文本信息分词的过程中，我们拿分割出来的单词，先到散列表中查找，如果找到，那就直接使用已有的编号；如果没有找到，我们再去计数器中拿号码，并且将这个新单词以及编号添加到散列表中。</span></div><div><br/></div><div><span style="font-size: 12pt;">当所有的网页处理（分词及写入临时索引）完成之后，我们再将这个单词跟编号之间的对应关系，写入到磁盘文件中，并命名为 term_id.bin。</span></div><div><br/></div><div><span style="font-size: 12pt;">经过分析阶段，我们得到了两个重要的文件。它们分别是临时索引文件（tmp_index.bin）和 单词编号文件（term_id.bin）。</span></div><div><br/></div><hr/><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">问题 ：如何&nbsp;&nbsp;构建 临时索引文件</span></div><div><br/></div><div><span style="font-size: 12pt;">1.存储 临时索引 的文件（tmp_index.bin）设计结构如下：&nbsp;&nbsp;</span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0-3</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">4 -7</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">8-11</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">12-15</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">term_id1（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id1（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">term_id2（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id1（4B）</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">值</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">2</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td></tr></tbody></table><div><br/></div><div><span style="font-size: 12pt;">2.单词编号&nbsp;&nbsp;文件不大（term_id.bin），&nbsp;&nbsp;可以 放入&nbsp;&nbsp;内存的 Hash&nbsp;&nbsp;表中，结构为：</span></div><div><span style="font-size: 12pt;">{&nbsp;&nbsp; term :&nbsp;&nbsp;term_id }</span></div><div><br/></div><div><span style="font-size: 12pt;">同理，逆单词编号 &nbsp;&nbsp;文件（inver_term_id.bin）&nbsp;&nbsp;的结构为：</span></div><div><span style="font-size: 12pt;">{&nbsp;&nbsp;term_id ：&nbsp;&nbsp;term }</span></div><div><br/></div><div><span style="font-size: 12pt;">其中&nbsp;&nbsp;单词id&nbsp;&nbsp;的计数器&nbsp;&nbsp;可以直接&nbsp;&nbsp;使用 hash&nbsp;&nbsp;表的&nbsp;&nbsp;长度</span></div><div><br/></div><div><span style="font-size: 12pt;">3.分词&nbsp;&nbsp;采用&nbsp;&nbsp;结巴中文分词&nbsp;&nbsp;</span><a href="https://github.com/fxsjy/jieba" style="font-size: 12pt;">https://github.com/fxsjy/jieba</a></div><div><br/></div><div><span style="font-size: 12pt;">要额外导入&nbsp;&nbsp;自己的&nbsp;&nbsp;词典，以便包含 jieba 词库里没有的词</span></div><div><span style="font-size: 12pt;">词典中 一个词占一行；每一行分三部分：词语、词频（可省略）、词性（可省略），用空格隔开</span></div><div><br/></div><div><span style="font-size: 12pt;">在爬取的原始网页的 文件（doc_raw.bin）中，每一个百度百科文档的 第一行为&nbsp;&nbsp;这个词条页&nbsp;&nbsp;的词条，所以可以把&nbsp;&nbsp;这个词条&nbsp;&nbsp;加入词典（baidubaikeDic.txt），词频 根据&nbsp;&nbsp;经验&nbsp;&nbsp;都取 10000</span></div><div><br/></div><div><span style="font-size: 12pt;">使用 add_word(word, freq=None, tag=None) 和 del_word(word) 可在程序中动态修改词典，但是我们采用&nbsp;&nbsp;先形成&nbsp;&nbsp;词典再进行分词的方式，因为在&nbsp;&nbsp;该词条页的文本中&nbsp;&nbsp;极有可能&nbsp;&nbsp;有别的词条，因而 需要被正确地分词。</span></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt;">4.解析&nbsp;&nbsp;文档内容时，先过滤&nbsp;&nbsp;不可见的&nbsp;&nbsp;非法字符</span></div><div><br/></div><div><br/></div></div><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/T</summary>
      
    
    
    
    <category term="从零开始搭建搜索引擎" scheme="https://xinrihui.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="倒排索引" scheme="https://xinrihui.github.io/tags/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    
    <category term="bm25" scheme="https://xinrihui.github.io/tags/bm25/"/>
    
    <category term="tf-idf" scheme="https://xinrihui.github.io/tags/tf-idf/"/>
    
  </entry>
  
  <entry>
    <title>小灰灰信息检索系统 - 2.解析网页文档</title>
    <link href="https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3/"/>
    <id>https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3/</id>
    <published>2022-12-04T14:27:25.000Z</published>
    <updated>2022-12-04T14:29:16.428Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="羊村的好朋友小灰灰"/><meta name="created" content="2022-01-27 07:53:07 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="updated" content="2022-12-04 14:00:44 +0000"/><title>小灰灰信息检索系统 - 2.解析网页文档</title></head><body><div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">1.基础方法</span></div><div><br/></div><div><span style="font-size: 12pt;">常见的python网页解析工具有：re正则匹配、python自带的html.parser模块、第三方库 BeautifulSoup 和 lxml</span></div><div><br/></div><div><span style="font-size: 12pt;">（1）模糊匹配</span></div><div><span style="font-size: 12pt;">　re正则表达式 即为字符串式的模糊匹配模式；</span></div><div><br/></div><div><span style="font-size: 12pt;">（2）结构化解析</span></div><div><span style="font-size: 12pt;">BeatufiulSoup、html.parser与lxml为“结构化解析”模式，他们都以DOM树结构为标准，进行标签结构信息的提取。</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/CDC6BC4F-628A-4CE6-BAEA-42AF07A0A6C0.png" height="348" width="885"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">DOM树 ：文档对象模型（Document Object Model） 它的 树形标签结构见下图：</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/E6B135BD-C94A-4957-934F-743ECD7B0898.png" height="392" width="913"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">网页解析器 会将下载的整个HTML文档当成一个Doucment对象，利用 对象的上下级标签 对网页内容进行 遍历 和信息提取。</span></div><div><br/></div><div><span style="font-size: 12pt;">整体流程如下：</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/61F3A8BB-2D8E-4CC9-9B41-74F5CE646D44.png" height="459" width="882"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">（1）创建BeautifulSoup对象（即DOM对象）</span></div><div><br/></div><div><span style="font-size: 12pt;">from bs4 import BeatifulSoup</span></div><div><span style="font-size: 12pt;"># 根据HTML网页字符串结构创建BeatifulSoup对象。</span></div><div><span style="font-size: 12pt;">soup = BeautifulSoup(html_doc,                      #HTML文档字符串</span></div><div><span style="font-size: 12pt;">                         'html.parser',                  #HTML解析器</span></div><div><span style="font-size: 12pt;">                         from_encoding = 'utf-8'         #HTML文档编码</span></div><div><span style="font-size: 12pt;">                          )</span></div><div><br/></div><div><span style="font-size: 12pt;">（2）搜索节点（find_all,find）</span></div><div><span style="font-size: 12pt;">　　</span></div><div><span style="font-size: 12pt;">       搜索节点方法：</span></div><div><span style="font-size: 12pt;">　　soup.find_all()  --- 查找所有符合查询条件的标签节点，并返回一个列表。</span></div><div><span style="font-size: 12pt;">　　soup.find()      --- 查找符合符合查询条件的第一个标签节点。</span></div><div><br/></div><div><span style="font-size: 12pt;"> 实例1：搜索所有&lt;a&gt;标签</span></div><div><span style="font-size: 12pt;"> soup.find_all('a')</span></div><div><span style="font-size: 12pt;">　　　</span></div><div><span style="font-size: 12pt;">实例2：查找所有标签符合标签名为a，链接符合 /view/123.html的节点</span></div><div><span style="font-size: 12pt;">M1：</span></div><div><span style="font-size: 12pt;"> soup.find_all('a', href = '/view/123.html')</span></div><div><span style="font-size: 12pt;">M2：</span></div><div><span style="font-size: 12pt;"> soup.find_all('a', href =</span> <a href="http://re.compile(r'/view/" style="font-size: 12pt;">re.compile(r'/view/</a><span style="font-size: 12pt;">\d+\.html'))</span></div><div><br/></div><div><span style="font-size: 12pt;">实例3：查找所有标签为名为a，class属性为abc，文字为python的节点　</span></div><div><span style="font-size: 12pt;"> soup.findall('a', class_= 'abc', string = 'python')</span></div><div><br/></div><div><span style="font-size: 12pt;">(3) 访问节点信息</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/A94F42C8-C73E-4417-9896-2DB5DC6E6798.png" height="312" width="950"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">1) 获取节点名称  node.name</span></div><div><span style="font-size: 12pt;">　　　　</span></div><div><span style="font-size: 12pt;">2)获取查找到的a节点的href属性</span></div><div><span style="font-size: 12pt;">node['href']</span></div><div><span style="font-size: 12pt;">　或者</span></div><div><span style="font-size: 12pt;">node.get('href')</span></div><div><span style="font-size: 12pt;">　　　　</span></div><div><span style="font-size: 12pt;">3）获取查找到的a节点的字符串内容</span></div><div><span style="font-size: 12pt;">node.get_text()</span></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">引用</span></div><div><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" style="font-size: 12pt;">https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/</a></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">2.高级方法</span></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">2.1 爬取 瀑布流 型网页 中的元素</span></div><div><br/></div><div><span style="font-size: 12pt;">看一下瀑布流型的网页是如何翻页的：</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/F86A62CE-9976-4BD4-8DBB-FA840838CFA9.png" height="815" width="1512"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">点击加载更多页面下方会加载更多的商品（有些网址是往下滚动的时候自动加载，原理一样），但是浏览器地址栏的网址不会改变，</span><span style="font-size: 12pt; color: rgb(255, 0, 0);">那么怎么才能找出类似翻页的规律呢？</span></div><div><br/></div><div><span style="font-size: 12pt;">chrome 游览器  F12 打开网页的 源码 出现如下页面，选择Network一栏，点击之前看到的</span> <span style="font-size: 12pt; font-weight: bold;">加载更多</span> <span style="font-size: 12pt;">进行商品加载，在Network的 XHR一栏会依次出现数个元素，查看元素的 Header </span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/80E34218-3E88-4DF3-9C9A-FAC2C58E14E0.png" height="510" width="1376"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">chrome  查看HTTP 请求的详情 方法：</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/0F1C4D1D-A77A-4AD4-994A-2A07747B8471.png" height="622" width="968"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">Header  中的 找到Request URL的值，发现规律：</span></div><div><a href="http://www.dunkhome.com/products/load_more?c_id=&amp;brand_id=&amp;keyword=&amp;sort=&amp;activity_id=&amp;page=2" style="font-size: 12pt;">http://www.dunkhome.com/products/load_more?c_id=&amp;brand_id=&amp;keyword=&amp;sort=&amp;activity_id=&amp;page=2</a></div><div><a href="http://www.dunkhome.com/products/load_more?c_id=&amp;brand_id=&amp;keyword=&amp;sort=&amp;activity_id=&amp;page=3" style="font-size: 12pt;">http://www.dunkhome.com/products/load_more?c_id=&amp;brand_id=&amp;keyword=&amp;sort=&amp;activity_id=&amp;page=3</a></div><div><a href="http://www.dunkhome.com/products/load_more?c_id=&amp;brand_id=&amp;keyword=&amp;sort=&amp;activity_id=&amp;page=4" style="font-size: 12pt;">http://www.dunkhome.com/products/load_more?c_id=&amp;brand_id=&amp;keyword=&amp;sort=&amp;activity_id=&amp;page=4</a></div><div><br/></div><div><span style="font-size: 12pt;">每点击 “加载更多”一次，链接变动一次（链接 最后的 page=2 ，page=3，page=4），可以将其看成翻页的页面变化规律。</span></div><div><span style="font-size: 12pt;">利用这个链接变化规律做循环，就能 模拟 持续翻页 并找到 我们要的图片</span></div><div><br/></div><div><span style="font-size: 12pt;">点击 其中一个 URL ，效果如下：</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/421F85C3-5F31-4658-9318-0BAFCC2F48E1.png" height="532" width="1099"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">找其中的 图片链接，发现都在src="(.*?).jpg字段里面，提取出来，进行下载即可</span></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">引用</span></div><div><a href="https://blog.csdn.net/malvas/article/details/89965210" style="font-size: 12pt;">https://blog.csdn.net/malvas/article/details/89965210</a></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">2.2 爬取 需要 post 才能拿到的元素</span></div><div><br/></div><div><span style="font-size: 12pt;">我们把 百度百科 分为 索引页面 和 词条页面</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">索引页面的第0级  </span> <a href="https://baike.baidu.com/" style="font-size: 12pt;">https://baike.baidu.com/</a></div></li></ul><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/DD8A5160-367F-4232-96EC-63BEC997AF79.png" height="903" width="1920"/><br/></div><div><span style="font-size: 12pt;">在  分类 tag 下面有大类的 学科，我们 选择 进入 科学类</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;"> 索引页面的第1级 </span> <a href="https://baike.baidu.com/science" style="font-size: 12pt;">https://baike.baidu.com/science</a></div></li></ul><div><br/></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/6B1F422D-DD70-44FF-9C3F-21B725FE6A15.png" height="845" width="1657"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">在页面的 底部有 各个细分的学科，我们选择 航空航天 ：</span></div><div><br/></div><ul><li><div><span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 12pt; color: rgb(0, 0, 0); font-family: 微软雅黑; font-variant-caps: normal; font-variant-ligatures: normal;">索引页面的第2级  </span> <a href="https://baike.baidu.com/wikitag/taglist?tagId=76572" style="font-size: 12pt;">https://baike.baidu.com/wikitag/taglist?tagId=76572</a></div></li></ul><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/CC959F9E-A63D-4B07-B84C-6E5AAB57FE43.png" height="653" width="1673"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">这是  百度百科 索引页 的最后一层 ，可见 其采用了 瀑布流的形式来 展示元素 。</span></div><div><span style="font-size: 12pt;">再往下一层就是 具体的 词条的页面了 ，例如 歼-20 的词条页：</span> <a href="https://baike.baidu.com/item/%E6%AD%BC-20/1555348" style="font-size: 12pt;">https://baike.baidu.com/item/%E6%AD%BC-20/1555348</a></div><div><br/></div><div><span style="font-size: 12pt;">目前，github 上开源的 百科爬虫 都只能支持 词条页面的爬取，而无法爬取索引页面。</span></div><div><span style="font-size: 12pt;">例如 ， </span> <a href="https://github.com/jasonhavenD/Baike" style="font-size: 12pt;">https://github.com/jasonhavenD/Baike</a><span style="font-size: 12pt;"> 这个项目 使用 一个已有的 词条字典列表，然后通过  拼接的方式 ，（读取词条列表中的词条，与 百度百科的前缀 进行拼接） 得到到 词条页的URL（见下图）。</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/D8F66050-770B-4BB8-AD45-A41BEF1650AE.png" height="37" width="426"/><br/></div><div><span style="font-size: 12pt;">但是，最关键的 问题是 我们要如何 才能拿到 百度百科的 词条字典 列表。显然，还是得去爬取 百度百科的索引列表。</span></div><div><br/></div><div><span style="font-size: 12pt;">因此，我们要构建 一个 可以爬取索引页面 和 词条页面的爬虫，无需 预先准备词条字典，一站式解决 百度百科所有词条页面的爬取 。</span></div><div><br/></div><div><span style="font-size: 12pt;">不同分类的 第 1 级索引的 形式  不同，</span></div><div><span style="font-size: 12pt;"> 第2级索引 的形式也不一样，大部分并没有像  </span> <a href="https://baike.baidu.com/wikitag/taglist?tagId=76572" style="font-size: 12pt;">https://baike.baidu.com/wikitag/taglist?tagId=76572</a><span style="font-size: 12pt;"> 这样的瀑布流 </span></div><div><br/></div><div><span style="font-size: 12pt;">例如：</span></div><div><span style="font-size: 12pt;">第1级索引 </span> <a href="http://baike.baidu.com/jingji" style="font-size: 12pt;">http://baike.baidu.com/jingji</a></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/1779F05B-D26A-4228-ADF1-C8028A9D0B55.png" height="525" width="1200"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">第2级索引：</span> <a href="http://baike.baidu.com/fenlei/%E7%BB%8F%E6%B5%8E%E5%AD%A6" style="font-size: 12pt;">http://baike.baidu.com/fenlei/%E7%BB%8F%E6%B5%8E%E5%AD%A6</a></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/B9415A51-C90A-428A-BCD8-1B5FA2890443.png" height="756" width="1513"/><br/></div><div><span style="font-size: 12pt;">在第2级索引 下面有一个 分页展示的 tag ，可以直接通向词条 页面</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/7105A7DB-CF19-4E4A-99DD-148B65A5CEA1.png" height="730" width="1307"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">在 第1级 索引中，完全可能 跳 到 具体的 词条页面：</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/97B51CC2-20CF-432F-98B7-17B1B32A15A3.png" height="702" width="1254"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">基于上述的观察，我们设计了 如下的策略 爬取 百度百科的内容：</span></div><div><br/></div><div><span style="font-size: 12pt;">1.根据 URL 是否有 item 来判断 是否 为词条页（</span> <a href="https://baike.baidu.com/item/%E6%AD%BC-20/1555348" style="font-size: 12pt;">https://baike.baidu.com/item/歼-20/1555348</a> <span style="font-size: 12pt;">），若为词条页，则 将其保存下来，并不 对其中的内容 解析出新的 URL</span></div><div><span style="font-size: 12pt;">2.对于 非词条页   ，我们要  对其中的内容 解析出新的 URL：</span></div><ul><li><div><span style="font-size: 12pt;">根据 URL 是否有 wikitag判断（ </span><a href="https://baike.baidu.com/wikitag/taglist?tagId=76572" style="font-size: 12pt;">https://baike.baidu.com/wikitag/taglist?tagId=76572</a><span style="font-size: 12pt;"> ） 其中 索引页中 是否 有 瀑布流 ，并对瀑布流 中的元素进行解析，得到 词条页的URL </span></div></li></ul><div><br/></div><div><span style="font-size: 12pt;"> 利用 postman  工具 爬取 百度百科的 瀑布流元素，见下面视频：</span></div><div><a href="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/bandicam%202020-05-17%2010-59-46-660.mp4">bandicam 2020-05-17 10-59-46-660.mp4</a></div><div><span style="font-size: 12pt;">参考：</span></div><div><a href="https://www.cnblogs.com/birds-zhu/p/11175564.html" style="font-size: 12pt;">https://www.cnblogs.com/birds-zhu/p/11175564.html</a></div><div><a href="https://www.zhihu.com/question/60256922/answer/174211193" style="font-size: 12pt;">https://www.zhihu.com/question/60256922/answer/174211193</a></div><div><a href="https://www.zhihu.com/question/60256922/answer/174663698" style="font-size: 12pt;">https://www.zhihu.com/question/60256922/answer/174663698</a></div><div><br/></div><ul><li><div><span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 12pt; color: rgb(0, 0, 0); font-family: 微软雅黑; font-variant-caps: normal; font-variant-ligatures: normal;">根据 URL 是否有 fenlei 判断（</span><a href="http://baike.baidu.com/fenlei/%E7%BB%8F%E6%B5%8E%E5%AD%A6" style="font-size: 12pt;">http://baike.baidu.com/fenlei/%E7%BB%8F%E6%B5%8E%E5%AD%A6</a><span style="letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 12pt; color: rgb(0, 0, 0); font-family: 微软雅黑; font-variant-caps: normal; font-variant-ligatures: normal;">） 其中 索引页中 是否 有翻页 ，并对 翻页 中的元素进行解析，</span><span style="font-size: 12pt;">得到 词条页的URL </span></div></li></ul><div><span style="font-size: 12pt; font-weight: bold;">    </span><span style="font-size: 12pt; font-weight: bold;">     </span><span style="font-size: 12pt;">翻页的按钮 在 网页上直接可得，见下图 中的 page 元素：</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/0EC17678-B5A7-4C28-BCA1-3DC87190081A.png" height="733" width="1809"/><br/></div><div><span style="font-size: 12pt;">       page 元素 中 包含了 下一页的 URL ，所以 直接使用 普通索引页的方法解析 即可</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">解析 普通索引页  ：找 page 中的 &lt;a &gt; &lt;/a&gt; 元素，找出其中的 URL </span></div></li></ul><div><span style="font-size: 12pt;">        </span></div><div><span style="font-size: 12pt; font-weight: bold;">2.3 </span><span style="font-size: 12pt; font-weight: bold;">异步</span><span style="font-size: 12pt; font-weight: bold;">请求</span><span style="font-size: 12pt; font-weight: bold;">网页 </span></div><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 12pt;">如果 同步请求网页 很容易发生 网络阻塞，此时程序会卡主，无法往下执行，</span></div><div><span style="font-size: 12pt;">为了让程序能够继续执行：</span></div><div><span style="font-size: 12pt;">1.请求 网页的时候 设置超时时间，若阻塞则放弃</span></div><div><span style="font-size: 12pt;">2.请求 网页（get , post） 使用异步的方式</span></div><div><br/></div><div><span style="font-size: 12pt;">（1）</span></div><div style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; padding: 16px; overflow: auto; background-color: rgb(246, 248, 250); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><div><span style="font-size: 12pt; box-sizing: border-box; color: rgb(150, 152, 150); font-variant-caps: normal; font-variant-ligatures: normal;">#</span><span style="font-size: 12pt; box-sizing: border-box; color: rgb(150, 152, 150); font-variant-caps: normal; font-variant-ligatures: normal;"> wait for the first request to complete, if it hasn't already</span></div><div><span style="font-size: 12pt; color: rgb(36, 41, 46); font-variant-caps: normal; font-variant-ligatures: normal;">response_one </span><span style="font-size: 12pt; box-sizing: border-box; color: rgb(167, 29, 93); font-variant-caps: normal; font-variant-ligatures: normal;">=</span><span style="font-size: 12pt; color: rgb(36, 41, 46); font-variant-caps: normal; font-variant-ligatures: normal;"> future_one.result() 只到遇到这句话才等待,在这句话之前可以加入很多代码 程序不会被阻塞</span></div></div><div><span style="font-size: 12pt;">（2）</span></div><div style="box-sizing: border-box; margin-top: 0px; margin-bottom: 0px; word-wrap: normal; padding: 16px; overflow: auto; background-color: rgb(246, 248, 250); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; word-break: normal; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;"><span style="box-sizing: border-box; word-wrap: normal; overflow: auto; background-color: rgb(246, 248, 250); word-break: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; border-radius: 3px; font-size: 12pt; color: rgb(36, 41, 46); font-variant-caps: normal; font-variant-ligatures: normal;">session</span> <span style="box-sizing: border-box; word-wrap: normal; overflow: auto; background-color: rgb(246, 248, 250); word-break: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; border-radius: 3px; font-size: 12pt; color: rgb(167, 29, 93); font-variant-caps: normal; font-variant-ligatures: normal;">=</span> <span style="box-sizing: border-box; word-wrap: normal; overflow: auto; background-color: rgb(246, 248, 250); word-break: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; border-radius: 3px; font-size: 12pt; color: rgb(36, 41, 46); font-variant-caps: normal; font-variant-ligatures: normal;">FuturesSession(</span><span style="box-sizing: border-box; word-wrap: normal; overflow: auto; background-color: rgb(246, 248, 250); word-break: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; border-radius: 3px; font-size: 12pt; color: rgb(237, 106, 67); font-variant-caps: normal; font-variant-ligatures: normal;">max_workers</span><span style="box-sizing: border-box; word-wrap: normal; overflow: auto; background-color: rgb(246, 248, 250); word-break: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; border-radius: 3px; font-size: 12pt; color: rgb(167, 29, 93); font-variant-caps: normal; font-variant-ligatures: normal;">=</span><span style="box-sizing: border-box; word-wrap: normal; overflow: auto; background-color: rgb(246, 248, 250); word-break: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; border-radius: 3px; font-size: 12pt; color: rgb(0, 134, 179); font-variant-caps: normal; font-variant-ligatures: normal;">10</span><span style="box-sizing: border-box; word-wrap: normal; overflow: auto; background-color: rgb(246, 248, 250); word-break: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; border-radius: 3px; font-size: 12pt; color: rgb(36, 41, 46); font-variant-caps: normal; font-variant-ligatures: normal;">)</span></div><div><span style="font-size: 12pt;"> 并行度可以调到很高 比如 1000</span></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">引用</span></div><div><br/></div><div><a href="https://github.com/ross/requests-futures" style="font-size: 12pt;">https://github.com/ross/requests-futures</a><span style="font-size: 12pt;"> </span></div><div><br/></div><div><br/></div><hr/><div><br/></div><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">问题：实际爬取的 词条数目 与 百度百科 中统计的到词条数目不相符</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%202.%E8%A7%A3%E6%9E%90%E7%BD%91%E9%A1%B5%E6%96%87%E6%A1%A3.resources/26C36448-8DE3-4805-9E54-B5741FCB5C7D.png" height="306" width="691"/><span style="font-size: 12pt;"> </span></div><div><br/></div><div><span style="font-size: 12pt;">实际爬取 ： 21380 个 词条页</span></div><div><br/></div><div><span style="font-size: 12pt;">采用记日志（ logging ）的方法，统计 因为网络阻塞 丢失的 词条页 的数量</span></div><div><br/></div><div><span style="font-size: 12pt;">以 科学百科信息科学分类 (共16018个)  为例：</span></div><div><span style="font-size: 12pt;">实际爬取： </span></div><div><span style="font-size: 12pt;">total num: 15839 </span></div><div><br/></div><div><span style="font-size: 12pt;">cost time: 3535.541276361 s （ 1 hour ）</span></div><div><br/></div><div><span style="font-size: 12pt;">文档ID 范围： 1-15839 </span></div><div><br/></div><div><span style="font-size: 12pt;">查看日志信息 spider.log，只有 一个 error</span></div><div><br/></div><div><span style="font-size: 12pt;">2020-06-11 23:33:57,658 ERROR    -----&lt;class 'socket.timeout'&gt;:</span> <a href="http://baike.baidu.com/item/%E5%A4%8D%E7%94%A8%E5%88%B6%E5%BC%8F%E8%BD%AC%E6%8D%A2/16688038-----" style="font-size: 12pt;">http://baike.baidu.com/item/%E5%A4%8D%E7%94%A8%E5%88%B6%E5%BC%8F%E8%BD%AC%E6%8D%A2/16688038</a></div><div><br/></div><div><span style="font-size: 12pt;">每次实际爬取的 数量 与 网络条件的好坏有很大关系，因此，考虑加入 异步 请求网页机制</span></div><div><br/></div></div><br/></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="从零开始搭建搜索引擎" scheme="https://xinrihui.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="倒排索引" scheme="https://xinrihui.github.io/tags/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    
    <category term="bm25" scheme="https://xinrihui.github.io/tags/bm25/"/>
    
    <category term="tf-idf" scheme="https://xinrihui.github.io/tags/tf-idf/"/>
    
  </entry>
  
  <entry>
    <title>小灰灰信息检索系统 -1.爬虫</title>
    <link href="https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-1.%E7%88%AC%E8%99%AB/"/>
    <id>https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-1.%E7%88%AC%E8%99%AB/</id>
    <published>2022-12-04T14:27:24.000Z</published>
    <updated>2022-12-04T14:29:16.423Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="羊村的好朋友小灰灰"/><meta name="created" content="2022-01-27 02:52:47 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="updated" content="2022-12-04 14:02:41 +0000"/><title>小灰灰信息检索系统 -1.爬虫</title></head><body><div><div><div><span style="font-size: 12pt; font-weight: bold;">1.广度优先遍历</span></div><div><br/></div><div><span style="font-size: 12pt;">搜索引擎把整个互联网看作数据结构中的有向图，把每个页面看作一个顶点。如果某个页面中包含另外一个页面的链接，那我们就在两个顶点之间连一条有向边。我们可以利用图的遍历搜索算法，来遍历整个互联网中的网页。</span></div><div><br/></div><div><span style="font-size: 12pt;">有两种图的遍历方法，深度优先和广度优先。搜索引擎采用的是广度优先搜索策略。</span></div><div><span style="font-size: 12pt;">我们先找一些比较知名的网页（专业的叫法是权重比较高）的链接（比如新浪主页网址、腾讯主页网址等），作为种子网页链接，放入到队列中。爬虫按照广度优先的策略，不停地从队列中取出链接，然后去爬取对应的网页，解析出网页里包含的其他网页链接，再将解析出来的链接添加到队列中。</span></div><div><br/></div><div><br/></div><hr/><div><br/></div><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">问题：为什么采用广度优先 而不是深度优先</span></div><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 12pt; color: unset; font-family: unset;">按照常理，距离 核心网页 1跳 的网页 肯定是比  2跳的 网页重要，所以我先把 最重要的网页先爬取下来。接着再去爬取那些 不太重要的，</span><span style="font-size: 12pt; color: unset; font-family: unset;">这里完美 契合了 广度优先的思路，</span></div><div><span style="font-size: 12pt; color: unset; font-family: unset;">因为搜索引擎要优先爬取权重较高的页面，离种子网页越近，较大可能权重更高，广度优先更合适。</span></div><div><br/></div><hr/><div><br/></div><div><br/></div><div><span style="font-size: 12pt;"><span style="font-size: 12pt; font-weight: bold;">2.待爬取网页链接的存储</span></span></div><div><br/></div><div><span style="font-size: 12pt;">在广度优先搜索爬取页面的过程中，爬虫会不停地解析页面链接，将其放到队列中。于是，队列中的链接就会越来越多，可能会多到内存放不下。所以，我们</span><span style="font-size: 12pt; color: rgb(255, 0, 0);">用一个存储在磁盘中的文件</span><span style="font-size: 12pt; color: rgb(255, 0, 0);">（</span><span style="font-size: 12pt; color: rgb(255, 0, 0);">links.bin</span><span style="font-size: 12pt; color: rgb(255, 0, 0);">）</span><span style="font-size: 12pt; color: rgb(255, 0, 0);">来作为广度优先搜索中的队列</span><span style="font-size: 12pt;">。爬虫从该文件中取出链接去爬取对应的页面。等爬取到网页之后，将解析出来的链接，直接存储到文件</span><span style="font-size: 12pt;">中。</span></div><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 12pt;">这样用文件来存储网页链接的方式，还有其他好处。比如，支持断点续爬。也就是说，当机器断电之后，网页链接不会丢失；当机器重启之后，还可以从之前爬取到的位置继续爬取。</span></div><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 12pt;"><span style="font-size: 12pt; color: unset; font-family: unset; font-weight: bold;">2.1 利用外存实现队列</span></span></div><div><span style="font-size: 12pt;"><br/></span></div><ul><li><div><span style="font-weight: bold;">基于文件</span></div></li></ul><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 12pt;">新的 URL 追加（append）在文件队列的 尾部，并维护 文件的尾指针 tail；</span></div><div><span style="font-size: 12pt;">用一个 头指针 head 指向 文件中的首个未被读取的URL，每次从文件队列中读取（pop）一个URL，head 指针 移动到 下个URL的开始位置 ；</span></div><div><span style="font-size: 12pt;">头指针 和 尾指针 可以 存储在文件结构 头部的定长区域 中（见下表），每次 append 和 pop 都进行更新 。头指针 和 尾指针 还可以 存储 在 redis 中，或者是 关系数据库中 </span></div><div><br/></div><div><span style="font-size: 12pt;">文件结构设计如下：</span></div><div><span style="font-size: 12pt;">整个文件 分为 3个 域，head, tail，num（计数器） 和 content。其中 content 域 由  标记 URL 长度的 length域 和 URL域 组成 ，num 记录了 队列中的元素的个数</span></div><div><br/></div><div><span style="font-size: 12pt;">（1）初始化：</span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0-7</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">8-15</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">16-19</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">20</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">head（8B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">tail（8B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">num（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><br/></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">值</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">20</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">20</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><br/></div></td></tr></tbody></table><div><span style="font-size: 12pt;">8B =64位 的地址空间：  2^(64) 是 天文数字</span></div><div><span style="font-size: 12pt;">1TB=2^(40)</span></div><div><span style="font-size: 12pt;">....</span></div><div><span style="font-size: 12pt;">X86-64的64位 地址采用4层地址映射，如下图：</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-1.%E7%88%AC%E8%99%AB.resources/597962CE-AE68-426A-8048-CE0F2B8F3209.png" height="83" width="552"/><br/></div><div><span style="font-size: 12pt;">pgd、pud、pmd、pte各占了9位，加上12位的页内index，共用了48位。即可管理的地址空间为2^48=256T。而在32位地址模式时，该值仅为2^32=4G。</span></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt;">（2）文件尾部 追加URL：</span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 104px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">0-7</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">8-15</span></div></td><td style="width: 104px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">16-19</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">20-23</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">24-33</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">34-37</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">38-47</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">48</span></div></td></tr><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">head（8B）</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">tail（8B）</span></div></td><td style="width: 104px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">num（4B）</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">length(4B)</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">URL1（10B）</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">length(4B)</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">URL2（10B）</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><br/></div></td></tr><tr><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">值</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">20</span></div></td><td style="background-color: rgb(252, 83, 86); border: 1px solid rgb(251, 17, 21); width: 130px; padding: 8px;"><div><span style="font-size: 12pt; color: rgb(255, 255, 255);">48</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 104px; padding: 8px;"><div><span style="font-size: 12pt;">2</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">10</span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;"><a href="http://www.tp.com/" style="font-size: 12pt;">www.tp.com</a></span></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><span style="font-size: 12pt;">10</span></div></td><td style="background-color: rgb(255, 194, 0); border: 1px solid rgb(204, 155, 0); width: 130px; padding: 8px;"><div><a href="http://www.tp.com/" style="font-size: 12pt; color: rgb(0, 0, 0);">www.cs.com</a></div></td><td style="width: 130px; padding: 8px; border: 1px solid;"><div><br/></div></td></tr></tbody></table><div><span style="font-size: 12pt;">（3）弹出元素：</span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0-7</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">8-15</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">16-19</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">20-23</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">24-33</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">34-37</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">38-47</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">48</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">head（8B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">tail（8B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">num（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">length(4B)</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">URL1（10B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">length(4B)</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">URL2（10B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><br/></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">值</span></div></td><td style="background-color: rgb(252, 83, 86); border: 1px solid rgb(251, 17, 21); width: 130px; padding: 8px;"><div><span style="font-size: 12pt; color: rgb(255, 255, 255);">34</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">48</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">2</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">10</span></div></td><td style="background-color: rgb(255, 194, 0); border: 1px solid rgb(204, 155, 0); width: 130px; padding: 8px;"><div><a href="http://www.tp.com/" style="font-size: 12pt; color: rgb(0, 0, 0);">www.tp.com</a></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">10</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><a href="http://www.tp.com/" style="font-size: 12pt;">www.cs.com</a></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><br/></div></td></tr></tbody></table><div><br/></div><div><span style="font-size: 12pt;">解决 int  和 byte ，string 和 byte 的相互转换的问题  ，见  《python 大全》-&gt;老大难的 读写文本</span></div><div><br/></div><ul><li><div><span style="font-weight: bold;">基于数据库</span></div></li></ul><div><span style="font-size: 12pt;">利用 数据库  实现队列 </span></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt; color: unset; font-family: unset;">关于如何解析页面获取链接， 我们可以把整个页面看作一个大的字符串，然后利用字符串匹配算法，在这个大字符串中，搜索&lt;link&gt; 这样一个网页标签，然后顺序读取&lt;link&gt;&lt;/link&gt;之间的字符串。这其实就是网页链接。</span></div><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 12pt; font-weight: bold;">3.网页链接的判重</span></div><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 12pt;">使用布隆过滤器，我们就可以快速并且非常节省内存地实现网页的判重。</span></div><div><br/></div><div><span style="font-size: 12pt;">不过，还是刚刚那个问题，如果我们把布隆过滤器存储在内存中，那机器宕机重启之后，布隆过滤器就被清空了。这样就可能导致大量已经爬取的网页会被重复爬取。</span></div><div><br/></div><div><span style="font-size: 12pt;">这个问题该怎么解决呢？我们可以定期地（比如每隔半小时）将布隆过滤器持久化到磁盘中，存储在 bloom_filter.bin 文件中。这样，即便出现机器宕机，也只会丢失布隆过滤器中的部分数据。当机器重启之后，我们就可以重新读取磁盘中的 bloom_filter.bin 文件，将其恢复到内存中。</span></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt;"><span style="font-size: 12pt; font-weight: bold;">4. 原始网页的存储</span></span></div><div><br/></div><div><span style="font-size: 12pt;">爬取到网页之后，我们需要将其存储下来，以备后面离线分析、索引之用。那如何存储海量的原始网页数据呢？</span></div><div><br/></div><div><span style="font-size: 12pt;">如果我们把每个网页都存储为一个独立的文件，那磁盘中的文件就会非常多，数量可能会有几千万，甚至上亿。常用的文件系统显然不适合存储如此多的文件。所以，我们可以把多个网页存储在一个文件中。每个网页之间，通过一定的标识进行分隔，方便后续读取。具体的存储格式，如下图所示。其中，doc_id 这个字段是网页的编号</span></div><div><img src="/Resources/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-1.%E7%88%AC%E8%99%AB.resources/69A8DA34-1DAF-45A7-B89C-FE4412B8F67B.jpg" height="644" width="1142"/><br/></div><div><br/></div><div><span style="font-size: 12pt;">这样的一个文件也不能太大，因为文件系统对文件的大小也有一定的限制。所以，我们可以设置每个文件的大小不能超过一定的值（比如 1GB）。随着越来越多的网页被添加到文件中，文件的大小就会越来越大，当超过 1GB 的时候，我们就创建一个新的文件，用来存储新爬取的网页。</span></div><div><br/></div><div><span style="font-size: 12pt;">假设一台机器的硬盘大小是 100GB 左右，一个网页的平均大小是 64KB。那在一台机器上，我们可以存储 100 万到 200 万左右的网页。假设我们的机器的带宽是 10MB，那下载 100GB 的网页，大约需要 10000 秒。也就是说，爬取 100 多万的网页，也就是只需要花费几小时的时间。</span></div><div><br/></div><div><span style="font-size: 12pt;"><span style="font-size: 12pt; font-weight: bold;">5. 网页链接及编号的对应关系</span></span></div><div><br/></div><div><span style="font-size: 12pt;">刚刚我们提到了 网页编号这个概念，我现在解释一下。网页编号实际上就是给每个网页分配一个唯一的 ID，方便我们后续对网页进行分析、索引。那如何给网页编号呢？</span></div><div><br/></div><div><span style="font-size: 12pt;">我们可以按照网页被爬取的先后顺序，从小到大依次编号。具体是这样做的：我们维护一个中心的计数器，每爬取到一个网页之后，就从计数器中拿一个号码，分配给这个网页，然后计数器加一。在存储网页的同时，我们将网页链接跟编号之间的对应关系，存储在另一个 doc_id.bin 文件中。</span></div><div><br/></div><div><span style="font-size: 12pt;">爬虫在爬取网页的过程中，涉及的四个重要的文件，我就介绍完了。其中，links.bin 和 bloom_filter.bin 这两个文件是爬虫自身所用的。另外的两个（doc_raw.bin、doc_id.bin）是作为搜集阶段的成果，供后面的分析、索引、查询用的。</span></div><div><span style="font-size: 12pt;"><br/></span></div><div><br/></div><hr/><div><span style="font-size: 12pt; color: rgb(255, 0, 0);">问题： 如何将原始网页 存储在一个大文件中，并记录 网页编号 和 其对应的URL </span></div><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">方案1</span> <span style="font-size: 12pt;">： </span></div><div><br/></div><div><span style="font-size: 12pt;">1.存储原始网页的 文件（doc_raw.bin） 结构设计如下：</span></div><div><br/></div><div><span style="font-size: 12pt;">第1个域为  文档ID 的计数器 doc_id_num，第2个域 为 文档列表 doc_list，</span></div><div><span style="font-size: 12pt;">doc_list  中的每一个 文档信息 由 3个域 组成： 文档id ,  文档长度 ， 文档内容</span></div><div><br/></div><ul><li><div><span style="font-size: 12pt;">初始化 </span></div></li></ul><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0-3</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">4 -</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id_num（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_list </span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">值</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><br/></div></td></tr></tbody></table><ul><li><div><span style="font-size: 12pt;">在文件末尾，追加一个网页文档 </span></div></li></ul><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0-3</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">4-7</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">8-15</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">16-115</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id_num（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_length（8B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_content</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">值</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">100</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">&lt;html ....</span></div></td></tr></tbody></table><div><br/></div><div><span style="font-size: 12pt;">2.存储 文档ID 和 文档ID 在 doc_raw.bin 的偏移地址的文件 （doc_raw_offset.bin）结构设计如下：</span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0-3</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">4 -11</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id_offset（8B）</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">值</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">4</span></div></td></tr></tbody></table><div><span style="font-size: 12pt;">文件不大，<span style="font-size: 12pt; color: rgb(255, 0, 0);">可以存入内存的 hash 表中（hash_id_offset） </span></span></div><div><br/></div><div><br/></div><div><span style="font-size: 12pt;">3.存储 文档ID 和 对应的 URL 的文件（doc_id.bin）的 结构设计如下：</span></div><table style="border-collapse: collapse; min-width: 100%;"><colgroup><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/><col style="width: 130px;"/></colgroup><tbody><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">地址</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">0-3</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">4-7</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">8-17</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">域，占字节数</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">doc_id（4B）</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">length(4B)</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">URL1（10B）</span></div></td></tr><tr><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">值</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">1</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><span style="font-size: 12pt;">10</span></div></td><td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;"><div><a href="http://www.tp.com/" style="font-size: 12pt;">www.tp.com</a></div></td></tr></tbody></table><div><span style="font-size: 12pt;">此文件也不大 ，合并存入 hash_id_offset 中，hash_id_offset的 结构为 { doc_id : (offset,url)  }</span></div><div><br/></div><div><br/></div><div><br/></div></div><br/></div><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="从零开始搭建搜索引擎" scheme="https://xinrihui.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="倒排索引" scheme="https://xinrihui.github.io/tags/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    
    <category term="bm25" scheme="https://xinrihui.github.io/tags/bm25/"/>
    
    <category term="tf-idf" scheme="https://xinrihui.github.io/tags/tf-idf/"/>
    
  </entry>
  
  <entry>
    <title>小灰灰信息检索系统 - 0.介绍</title>
    <link href="https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%200.%E4%BB%8B%E7%BB%8D/"/>
    <id>https://xinrihui.github.io/2022/12/04/%E5%B0%8F%E7%81%B0%E7%81%B0%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%B3%BB%E7%BB%9F%20-%200.%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-12-04T14:27:23.000Z</published>
    <updated>2022-12-04T14:27:23.148Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/><meta name="exporter-version" content="Evernote Mac 9.5.34 (469085)"/><meta name="author" content="735407517@qq.com"/><meta name="created" content="2020-05-04 15:09:40 +0000"/><meta name="source" content="desktop.win"/><meta name="source-application" content="yinxiang.win32"/><meta name="source-url" content="https://time.geekbang.org/column/article/79433"/><meta name="updated" content="2022-12-04 13:49:42 +0000"/><title>小灰灰信息检索系统 - 0.介绍</title></head><body><div><br/></div><div><span style="font-size: 12pt; font-weight: bold;">1.</span> <span style="font-size: 12pt; font-weight: bold;">整体系统介绍</span></div><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 12pt; color: unset; font-family: unset;">我们将在一台机器上，实现一个小型搜索引擎。麻雀虽小，五脏俱全。跟大型搜索引擎相比，实现这样一个小型搜索引擎所用到的理论基础是相通的。</span></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt;">搜索引擎大致可以分为四个部分：</span><span style="font-size: 12pt; font-weight: bold;">搜集、分析、索引、查询</span><span style="font-size: 12pt;">。其中，搜集，就是我们常说的利用爬虫爬取网页。分析，主要负责网页内容抽取、分词，构建临时索引，计算 PageRank 值这几部分工作。索引，主要负责通过分析阶段得到的临时索引，构建倒排索引。查询，主要负责响应用户的请求，根据倒排索引获取相关网页，计算网页排名，返回查询结果给用户。</span></div><div><br/></div><div><span style="font-size: 12pt;">整个项目涉及的数据结构和算法有：图、散列表、Trie 树、布隆过滤器、单模式字符串匹配算法、多模式串匹配算法（</span><span style="font-size: 12pt;">AC 自动机</span><span style="font-size: 12pt;">）、广度优先遍历、归并排序、TF-IDF、BM25 等。</span></div><div><span style="font-size: 12pt;"><br/></span></div><div><span style="font-size: 16px;">代码详见 github：</span></div><div><span style="font-size: 16px;"><br/></span></div><div><a href="https://github.com/Xinrihui/Data-Structure-and-Algrithms/tree/master/30_Information_Retrieval">https://github.com/Xinrihui/Data-Structure-and-Algrithms/tree/master/30_Information_Retrieval</a></div><div><br/></div><div><font style="font-size: 12pt;"><br/></font></div><div><span style="font-size: 12pt; font-weight: bold;">引用</span></div><div><a href="https://time.geekbang.org/column/article/79433">https://time.geekbang.org/column/article/79433</a></div><div><br/></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><font style="font-size: 12pt;"><br/></font></div><div><br/></div></body></html>]]></content>
    
    
      
      
    <summary type="html">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtm</summary>
      
    
    
    
    <category term="从零开始搭建搜索引擎" scheme="https://xinrihui.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
    <category term="倒排索引" scheme="https://xinrihui.github.io/tags/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    
    <category term="bm25" scheme="https://xinrihui.github.io/tags/bm25/"/>
    
    <category term="tf-idf" scheme="https://xinrihui.github.io/tags/tf-idf/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="https://xinrihui.github.io/2022/12/03/readme/"/>
    <id>https://xinrihui.github.io/2022/12/03/readme/</id>
    <published>2022-12-03T14:05:20.000Z</published>
    <updated>2022-12-04T13:04:56.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><p>一个傻瓜的办法，可以自动生成博客网站，然后将其托管在github.io，这样不用自己租云服务器和购买域名，爽歪歪</p><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>下载安装包自己安装<br><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo 是一个能自动生成网站代码的框架（巨好用）</p><p>npm install -g hexo-cli</p><p>（npm 是 nodejs 的命令）</p><p>检查 Hexo 是否安装成功：<br>hexo -v</p><p>查看 Hexo 帮助 :<br>hexo –help</p><h2 id="生成网站代码"><a href="#生成网站代码" class="headerlink" title="生成网站代码"></a>生成网站代码</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>新建项目文件夹，并进入文件夹内：</p><p>mkdir Blog</p><p>cd Blog</p><p>初始化项目（必须进入到项目文件夹里面后，执行此命令）</p><p>hexo init </p><h3 id="启动网站"><a href="#启动网站" class="headerlink" title="启动网站"></a>启动网站</h3><p>hexo s </p><p>浏览器打开 <a href="http://localhost:4000/">http://localhost:4000</a>  能看到生成的网站页面</p><h2 id="更换网站主题"><a href="#更换网站主题" class="headerlink" title="更换网站主题"></a>更换网站主题</h2><p>官网下载主题 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>clone主题代码到 本项目下的 themes&#x2F;butterfly</p><p>git clone <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;butterfly</p><p>修改本项目下的配置文件 _config.yml<br>中的 主题选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>遇到报错的解决方案：</p><p>安装如下插件：</p><p>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</p><h3 id="清理项目缓存"><a href="#清理项目缓存" class="headerlink" title="清理项目缓存"></a>清理项目缓存</h3><p>hexo clean</p><h3 id="重新生成项目"><a href="#重新生成项目" class="headerlink" title="重新生成项目"></a>重新生成项目</h3><p>hexo g </p><p>启动网站：<br>hexo s </p><h2 id="将网站发布到-gihub-io-上"><a href="#将网站发布到-gihub-io-上" class="headerlink" title="将网站发布到 gihub.io 上"></a>将网站发布到 gihub.io 上</h2><p>在自己的 github 主页上新建仓，名字为 xinrihui.github.io</p><p>安装 hexo-deployer-git 插件：</p><p>npm install –save hexo-deployer-git</p><p>修改本项目下的配置文件 _config.yml 中的发布选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: https://github.com/Xinrihui/Xinrihui.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>部署项目到云端</p><p>hexo d </p><p>此时需要输入 github 的账号和密码，但是即使密码正确也会报错，<br>这是因为Github在2021年8月13日停止了使用账户密码认证的支持，<br>这时需要在Gihub上Developer Settings页面上新建一个 <a href="https://github.com/settings/tokens">Personal Access Token </a> 代替密码。</p><h2 id="给网站添加-分类页面-和-标签页面"><a href="#给网站添加-分类页面-和-标签页面" class="headerlink" title="给网站添加 分类页面 和 标签页面"></a>给网站添加 分类页面 和 标签页面</h2><p>在主题的配置文件 themes&#x2F;butterfly&#x2F;_config.yml 中放开注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories: /categories/ || fa fa-th </span><br><span class="line"></span><br><span class="line">tags: /tags/ || fa fa-tags </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用框架自动生成分类页面</p><p>hexo new page categories</p><p>让主题识别生成的页面为标签页面，打开 source&#x2F;categories&#x2F;index.md 页面文件，修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2021-01-25 22:37:25</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>同理，打开 source&#x2F;tags&#x2F;index.md 页面文件，修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-01-25 22:54:58</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>打开需要添加分类的文章，在文章里添加上以下文案就设置好分类了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">categories:</span><br><span class="line">- Android</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">//设置二级分类</span><br><span class="line">---</span><br><span class="line">categories: </span><br><span class="line">- Android</span><br><span class="line">- xxx</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开需要添加标签的文章，在文章里添加上以下文案，就设置好标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//设置单标签</span><br><span class="line">---</span><br><span class="line">tags:</span><br><span class="line">- Facebook配置</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">//设置多标签 并同时设置分类</span><br><span class="line">---</span><br><span class="line">categories:</span><br><span class="line">- Android</span><br><span class="line">  tags:</span><br><span class="line">- Android</span><br><span class="line">- RecyclerView</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="将-evernote-中的笔记导入到-网站中"><a href="#将-evernote-中的笔记导入到-网站中" class="headerlink" title="将 evernote 中的笔记导入到 网站中"></a>将 evernote 中的笔记导入到 网站中</h2><p>在印象笔记中将笔记导出为 .html </p><p>在 <a href="https://github.com/TreasureU/EvertNoteExportToHexo">EvertNoteExport.py</a> 中配置 印象笔记导出的 .html 文件的路径</p><p>运行 python 脚本：</p><p>python EvertNoteExport.py</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>[1] <a href="https://juejin.cn/post/6978377036645531662">https://juejin.cn/post/6978377036645531662</a></p><p>[2] <a href="https://github.com/TreasureU/EvertNoteExportToHexo">https://github.com/TreasureU/EvertNoteExportToHexo</a></p><p>[3]<a href="https://tohugo.com/2021/01/26/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE%EF%BC%88%E5%9C%A8Next%E4%B8%BB%E9%A2%98%E4%B8%8B%EF%BC%89/">https://tohugo.com/2021/01/26/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE%EF%BC%88%E5%9C%A8Next%E4%B8%BB%E9%A2%98%E4%B8%8B%EF%BC%89/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搭建个人博客&quot;&gt;&lt;a href=&quot;#搭建个人博客&quot; class=&quot;headerlink&quot; title=&quot;搭建个人博客&quot;&gt;&lt;/a&gt;搭建个人博客&lt;/h1&gt;&lt;p&gt;一个傻瓜的办法，可以自动生成博客网站，然后将其托管在github.io，这样不用自己租云服务器和购买域名，爽</summary>
      
    
    
    
    <category term="Web" scheme="https://xinrihui.github.io/categories/Web/"/>
    
    
    <category term="hexo" scheme="https://xinrihui.github.io/tags/hexo/"/>
    
    <category term="node.js" scheme="https://xinrihui.github.io/tags/node-js/"/>
    
  </entry>
  
</feed>
